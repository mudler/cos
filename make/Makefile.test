#
# cOS-toolkit Makefile.test
#
#

GINKGO_ARGS?=-progress -v --failFast -r

GINKGO?=$(shell which ginkgo 2> /dev/null)
ifeq ("$(GINKGO)","")
GINKGO="/usr/bin/ginkgo"
endif

VAGRANT?=$(shell which vagrant 2> /dev/null)
ifeq ("$(VAGRANT)","")
VAGRANT="/usr/bin/vagrant"
endif

#
# VirtualBox
#

VBOXMANAGE?=$(shell which VBoxManage 2> /dev/null)
ifeq ("$(VBOXMANAGE)","")
VBOXMANAGE="/usr/bin/VBoxManage"
endif

#
# VBoxManage is used to run a headless VirtualBox instance
#
$(VBOXMANAGE):
ifneq ($(shell id -u), 0)
	@echo "'$@' is missing and you must be root to install it."
	@exit 1
else
	@echo "Please install VirtualBox."
	@exit 1
endif

#
# ------------ actual test targets ------------
#

test: test-clean vagrantfile prepare-test test-smoke test-upgrades-images-signed test-upgrades-images-unsigned test-features test-fallback test-recovery test-deploys-images

#
# remove test artifacts
#

clean_test: test-clean


prepare-test: $(VAGRANT) $(BOXFILE)
	vagrant box add cos $(BOXFILE)
	cd $(ROOT_DIR)/tests && vagrant up || true

vagrantfile: $(ROOT_DIR)/tests/Vagrantfile $(VAGRANT)

$(ROOT_DIR)/tests/Vagrantfile: $(VAGRANT)
	cd $(ROOT_DIR)/tests && vagrant init cos

test-clean:
	(cd $(ROOT_DIR)/tests && vagrant destroy) 2> /dev/null || true
	(vagrant box remove cos) 2> /dev/null || true

$(VAGRANT):
	@echo "'vagrant' not found."
	@exit 1

test-fallback: $(GINKGO)
	cd $(ROOT_DIR)/tests && $(GINKGO) $(GINKGO_ARGS) ./fallback

test-features: $(GINKGO)
	cd $(ROOT_DIR)/tests && $(GINKGO) $(GINKGO_ARGS) ./features

test-upgrades-images-signed: $(GINKGO)
	cd $(ROOT_DIR)/tests && $(GINKGO) $(GINKGO_ARGS) ./upgrades-images-signed

test-upgrades-images-unsigned: $(GINKGO)
	cd $(ROOT_DIR)/tests && $(GINKGO) $(GINKGO_ARGS) ./upgrades-images-unsigned

test-upgrades-local: $(GINKGO)
	cd $(ROOT_DIR)/tests && $(GINKGO) $(GINKGO_ARGS) ./upgrades-local
	
test-smoke: $(GINKGO)
	cd $(ROOT_DIR)/tests && $(GINKGO) $(GINKGO_ARGS) ./smoke

test-recovery: $(GINKGO)
	cd $(ROOT_DIR)/tests && $(GINKGO) $(GINKGO_ARGS) ./recovery

test-deploys-images: $(GINKGO)
	cd $(ROOT_DIR)/tests && $(GINKGO) $(GINKGO_ARGS) ./deploys-images

$(GINKGO):
	@echo "'ginkgo' not found."
	@exit 1


#
# ------------ test for raw image  ------------
#

RAW?=$(shell ls $(ROOT_DIR)/*.raw 2> /dev/null)

raw_disk_test_deploy: create_vm_from_raw_image $(GINKGO)
	# run tests
	cd $(ROOT_DIR)/tests && $(GINKGO) $(GINKGO_ARGS) ./recovery-raw-disk

create_vm_from_raw_image: as_root $(VBOXMANAGE)
ifeq ("$(RAW)","")
	@echo "Raw image does not exists, please run make raw_disk first"
	@exit 1
else
	# transform the raw image
	VBoxManage convertdd $(RAW) sda.vdi --format VDI
	# increase disk size to 15Gb
	VBoxManage modifymedium disk sda.vdi --compact --resize 16000
	# creatre user-data iso (NoCloud)
	cp packer/user-data/aws.yaml user-data
	mkisofs -o cidata.iso -V CIDATA -J -r user-data
	# create vm
	VBoxManage createvm --name "test" --register
	# increase memory, otherwise grub fails to boot
	VBoxManage modifyvm "test" --memory 2048
	# config vm options, i.e. efi boot, nat, serial to file, etc...
	VBoxManage modifyvm "test" --firmware efi --uart1 0x3f8 4 --uartmode1 file $(ROOT_DIR)/serial_port1.log --nic1 nat --boot1 disk --natpf1 "guestssh,tcp,,2222,,22"
	# add sata controller
	VBoxManage storagectl "test" --name "sata controller" --add sata --portcount 2
	# attach the disk to the machine
	VBoxManage storageattach "test" --storagectl "sata controller" --port 0 --device 0 --type hdd --medium $(ROOT_DIR)/sda.vdi
	# attach the user-data iso
	VBoxManage storageattach "test" --storagectl "sata controller" --port 1 --device 0 --type dvddrive --medium $(ROOT_DIR)/cidata.iso
	# startvm and detach
	VBoxManage startvm "test" --type headless
endif

clean_raw_disk_test: as_root
	VBoxManage controlvm "test" poweroff &>/dev/null || true
	VBoxManage unregistervm "test" --delete &>/dev/null || true
	rm $(ROOT_DIR)/sda.vdi &>/dev/null || true
	rm $(ROOT_DIR)/user-data &>/dev/null || true
	rm $(ROOT_DIR)/cidata.iso &>/dev/null || true
	rm $(ROOT_DIR)/serial_port1.log  &>/dev/null || true
