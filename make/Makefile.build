#
# cOS-toolkit Makefile.build
#
#

#
# Backend to use for "luet build"
# Values "docker" or "podman"
#
BACKEND?=docker

#
# Concurrent downloads in luet
#
CONCURRENCY?=1

#
# Compression scheme for build artefacts
#
COMPRESSION?=zstd

PUSH_CACHE?=false

#
# Arguments for luet build
#

BUILD_ARGS?=--pull --no-spinner --only-target-package --live-output

#
# Luet plugins
#

PLUGINS?=

#
# Use Docker buildkit
DOCKER_BUILDKIT?=1
#

ifneq ($(strip $(ARCH)), x86_64)
	REPO_CACHE?=quay.io/costoolkit/build-$(FLAVOR)-cache-$(ARCH)
else
	REPO_CACHE?=quay.io/costoolkit/build-$(FLAVOR)-cache
endif

export REPO_CACHE
ifneq ($(strip $(REPO_CACHE)),)
	BUILD_ARGS+=--image-repository $(REPO_CACHE)
endif

_VALIDATE_OPTIONS?=-s

#
# Luet packages
#
PACKAGES?=--all

ifeq ("$(PUSH_CACHE)","true")
	BUILD_ARGS+=--push
endif

ifneq ($(strip $(PLUGINS)), )
	BUILD_ARGS+=$(foreach var,$(PLUGINS),--plugin $(var))
endif

PUBLISH_ARGS?=

.PHONY: build
build: $(LUET) $(DESTINATION)
ifneq ($(shell id -u), 0)
	@echo "Please run 'make $@' as root"
	@exit 1
endif
	# Buildkit is necessary due to https://github.com/moby/moby/issues/37965
	DOCKER_BUILDKIT=$(DOCKER_BUILDKIT) $(LUET) build $(BUILD_ARGS) \
	--values $(ROOT_DIR)/values/$(FLAVOR)-$(ARCH).yaml \
	--tree=$(TREE) \
	--backend $(BACKEND) \
	--concurrency $(CONCURRENCY) \
	--pull-repository $(FINAL_REPO) \
	--compression $(COMPRESSION) \
	--destination $(DESTINATION) \
        $(PACKAGES)


#
# Push to Docker registry
# 
#

publish-repo: $(LUET)
ifneq ($(shell id -u), 0)
	@echo "Please run 'make $@' as root"
	@exit 1
endif
	$(LUET) create-repo --no-spinner $(PUBLISH_ARGS) --tree "$(TREE)" \
	--from-metadata \
    --output $(FINAL_REPO) \
    --packages $(DESTINATION) \
    --name "cOS" \
    --descr "cOS $(FLAVOR)" \
    --urls "" \
    --tree-compression $(COMPRESSION) \
    --tree-filename tree.tar \
    --meta-compression $(COMPRESSION) \
    --push-images \
    --type docker \
    --snapshot-id $(SNAPSHOT_ID)

#
# Start local server at port 8000
#

serve-repo: $(LUET)
	LUET_NOLOCK=true $(LUET) serve-repo --port 8000 --dir $(DESTINATION)

autobump: $(LUET)
	TREE_DIR=$(ROOT_DIR)/packages $(LUET) autobump-github

validate: $(LUET)
	$(LUET) tree validate --tree $(TREE) $(_VALIDATE_OPTIONS)

#
# remove build artifacts
#

clean_build:
	sudo rm -rf $(DESTINATION)


sign_artifacts:
	cd ./.github && go build -o sign sign.go
	$(ROOT_DIR)/.github/sign