#
# cOS-toolkit Makefile.iso
#
#

MAKEISO_ARGS?=
MKSQUASHFS?=$(shell which mksquashfs 2> /dev/null)
ifeq ("$(MKSQUASHFS)","")
MKSQUASHFS="/usr/bin/mksquashfs"
endif

#
# Find correct (hashicorp/packer) binary
#

# if PACKER is pre-set, leave it alone
PACKER?=$(shell which packer 2> /dev/null)
ifeq ("$(PACKER)","")
PACKER="/usr/bin/packer"
endif

$(PACKER):
ifneq ($(shell id -u), 0)
	@echo "'$@' is missing and you must be root to install it."
	@exit 1
else
	$(LUET) install -y utils/packer
endif

#
# remove iso artifacts
#

clean_iso: packer-clean
	rm -rf $(ROOT_DIR)/*.iso $(ROOT_DIR)/*.iso.sha256
	rm -rf $(DESTINATION)/tree.tar.zst
	rm -rf $(MANIFEST).remote
	sudo rm -rf isowork

$(DESTINATION):
	mkdir -m 755 $(DESTINATION)

#
# build ISO from repository
#

$(MKSQUASHFS):
	@echo "'mksquashfs' not found, install 'squashfs' package."
	@exit 1

.PHONY: create-repo
create-repo: $(LUET) $(DESTINATION)
ifneq ($(shell id -u), 0)
	@echo "*** Must be root"
	@exit 1
endif
	$(LUET) create-repo --tree "$(TREE)" \
    --output $(DESTINATION) \
    --from-metadata \
    --packages $(DESTINATION) \
    --name "cOS" \
    --descr "cOS $(FLAVOR)" \
    --urls "" \
    --tree-compression $(COMPRESSION) \
    --tree-filename tree.tar \
    --meta-compression $(COMPRESSION) \
    --type http \
    --snapshot-id $(SNAPSHOT_ID)


$(DESTINATION)/tree.tar.zst:
	make create-repo

.PHONY: local-iso
local-iso: $(ELEMENTAL) $(DESTINATION) $(MKSQUASHFS) $(DESTINATION)/tree.tar.zst
ifneq ($(shell id -u), 0)
	@echo "*** Please run 'make $@' as root"
	@exit 1
endif
ifneq ("$(ISO)","")
	@echo "'$(ISO) exists, run 'make clean_iso' folled by 'make $@' to recreate"
else
# Add repo based on flavor to the manifest, so any files not available in local build are picked from there
# instead of getting them from the default repo in elemental binary, i.e. green
	$(YQ) -i '.repositories[0].uri = "$(FINAL_REPO)"| .repositories[0].priority = 30' $(MANIFEST)
	$(ELEMENTAL) --debug --config-dir $(ROOT_DIR) build-iso $(MAKEISO_ARGS) --firmware bios --arch $(ARCH) --date --repo $(DESTINATION)
endif

.PHONY: iso
iso: $(ELEMENTAL) $(MKSQUASHFS)
ifneq ($(shell id -u), 0)
	@echo "*** Please run 'make $@' as root"
	@exit 1
endif
ifneq ("$(ISO)","")
	@echo "'$(ISO) exists, run 'make clean_iso' folled by 'make $@' to recreate"
else
	$(ELEMENTAL) --debug --config-dir $(ROOT_DIR) build-iso $(MAKEISO_ARGS) --firmware bios --arch $(ARCH) --repo $(FINAL_REPO)
endif


BOXFILE=$(shell ls $(ROOT_DIR)/packer/*$(ARCH).box 2> /dev/null)
ifeq ("$(BOXFILE)","")
BOXFILE="$(ROOT_DIR)/packer/cOS.box"
endif

#
#
#

.PHONY: packer
#
# target 'packer' creates a compressed tarball with an 'ova' file
#
packer: $(BOXFILE)

packer-clean:
	rm -rf $(BOXFILE)

$(BOXFILE): $(PACKER)
ifeq ("$(PACKER)","/usr/sbin/packer")
	@echo "The 'packer' binary at $(PACKER) might be from cracklib"
	@echo "Please set PACKER to the correct binary before calling make"
	@exit 1
endif
	export PKR_VAR_iso=$(ISO) && cd $(ROOT_DIR)/packer && $(PACKER) build -only $(PACKER_TARGET) .
