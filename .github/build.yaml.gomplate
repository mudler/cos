{{{ $config := (datasource "config") }}}

{{{define "cos_version" }}}
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
{{{ end }}}


{{{define "prepare_worker" }}}
  {{{ $config := (datasource "config") }}}
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
  {{{ tmpl.Exec "runner_cleanup" }}}
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
{{{ end }}}

{{{define "runner_cleanup" }}}
  {{{ $config := (datasource "config") }}}
      - name: Release space from worker â™»
        if: always()
        run: |
  {{{- if $config.local_runner }}}
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
  {{{- else }}}
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
  {{{- end }}}
{{{ end }}}

{{{define "prepare_build" }}}
  {{{ $config := (datasource "config") }}}
  {{{ tmpl.Exec "runner_cleanup" }}}

  {{{- if $config.local_runner }}}
  {{{ $arch := $config.arch }}}
  {{{ if eq $arch "x86_64" }}}
  {{{ $arch = "amd64" }}}
  {{{ end }}}
      - name: Install Go
        run: |
          curl -L https://golang.org/dl/go1.17.5.linux-{{{ $arch }}}.tar.gz -o go1.17.5.linux-{{{ $arch }}}.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.17.5.linux-{{{ $arch }}}.tar.gz
  {{{- else }}}
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
  {{{- end }}}
  {{{- if $config.local_runner }}}
      - name: Install make
        run: |
            sudo apt-get update
            sudo apt-get install -y make
  {{{- end }}}

{{{ end }}}

{{{define "git_permissions" }}}
      - name: Fix git permissions for CVE-2022-24765
        # This fixes running git commands on our git directory under sudo user
        # See https://github.blog/2022-04-12-git-security-vulnerability-announced/ for more info
        run: |
          sudo git config --global --add safe.directory ${{ github.workspace }}
          git config --global --add safe.directory ${{ github.workspace }}
{{{ end }}}

{{{define "make"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $target := . }}}
      - name: Run make {{{ $target }}}
        run: |
          {{{ if eq $target "deps_ci" }}}
          export DOCKER_INSTALL=true
          {{{end}}}
          sudo -E make {{{ $target }}}
  {{{ if eq $target "deps_ci" }}}
  {{{- if ne $config.luet_override "" }}}
      - name: Override luet version at toolchain/luet@{{{ $config.luet_override }}} ðŸ”§
        run: |
          sudo luet replace --yes toolchain/luet --for toolchain/luet@{{{ $config.luet_override }}}
  {{{  end }}}
  {{{ if ne $config.luet_script_override "" }}}
      - name: Override luet version at {{{ $config.luet_script_override }}} ðŸ”§
        run: |
          export DOCKER_INSTALL=false
          export LUET_INSTALL_FROM_COS_REPO=false
          export LUET_VERSION={{{$config.luet_script_override}}}
          sudo -E scripts/get_luet.sh
  {{{ end }}}
  {{{  end }}}
{{{end}}}

{{{define "runner"}}}
  {{{ $config := (datasource "config") }}}
  {{{- if $config.local_runner }}}
    runs-on: [{{{ join $config.runs_on ", "}}}]
  {{{- else }}}
    runs-on: ubuntu-latest
  {{{ end }}}
{{{end}}}

{{{- define "generate_labels"}}}
{{{- $config := (datasource "config") }}}
{{{- range $config.labels}}} && contains(github.event.pull_request.labels.*.name, '{{{ . }}}'){{{- end}}}
{{{- end}}}

{{{define "if_with_labels"}}}
{{{ $config := (datasource "config") }}}
{{{if has $config "labels"}}}
  {{{- if $config.local_runner }}}
    if: contains(fromJson('["mudler", "fgiudici", "mjura", "davidcassany", "itxaka", "kkaempf", "cOS-cibot"]'), github.actor) {{{- tmpl.Exec "generate_labels" }}}
  {{{else}}}
    if: always() && {{{- tmpl.Exec "generate_labels" }}}
  {{{end}}}
{{{else}}}
  {{{- if $config.local_runner }}}
    if: contains(fromJson('["mudler", "fgiudici", "mjura", "davidcassany", "itxaka", "kkaempf", "cOS-cibot"]'), github.actor)
  {{{end}}}
{{{end}}}
{{{end}}}

{{{define "docker_build_packages"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := . }}}
  docker-build-{{{ $flavor }}}:
    {{{ tmpl.Exec "runner" }}}
    {{{tmpl.Exec "if_with_labels" }}}
    env:
      FLAVOR: {{{ $flavor }}}
      ARCH: {{{ $config.arch }}}
    steps:
      {{{ tmpl.Exec "prepare_worker" }}}
      - name: Build  ðŸ”§
        shell: 'script -q -e -c "bash {0}"'
        run: |
          source .envrc
          cos-build $FLAVOR
{{{end}}}

{{{define "build_packages"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := . }}}
  build-{{{ $flavor }}}-{{{ $config.arch }}}:
    {{{ tmpl.Exec "runner" }}}
    {{{tmpl.Exec "if_with_labels" }}}
    env:
      LUET_ARCH: {{{ $config.arch }}}
      FLAVOR: {{{ $flavor }}}
      ARCH: {{{ $config.arch }}}
      FINAL_REPO: {{{$config.organization}}}/{{{$config.repository}}}-{{{ $flavor }}}{{{- if ne $config.arch "x86_64"}}}-{{{$config.arch}}}{{{end}}}
      DOWNLOAD_METADATA: false
      PUSH_CACHE: {{{$config.push_cache}}}
      REPO_CACHE: {{{$config.organization}}}/{{{$config.cache_repository}}}-{{{ $flavor }}}-cache{{{- if ne $config.arch "x86_64"}}}-{{{$config.arch}}}{{{end}}}
      {{{- if has $config "luet_install_from_cos_repo" }}}
      LUET_INSTALL_FROM_COS_REPO: {{{ $config.luet_install_from_cos_repo }}}
      {{{- end }}}
      {{{- if ne $config.arch "x86_64"}}}
      {{{- if eq $flavor "orange" }}}
      # For orange arm64 we need to disable buildkit
      DOCKER_BUILDKIT: 0
      {{{- end }}}
      # For non x86_64 archs, skip the *-fips build as there are no golang releases in other arches
      SKIP_PACKAGES: "build/golang-fips toolchain-fips/yip toolchain-fips/luet-makeiso toolchain-fips/luet live/syslinux live/systemd-boot live/boot"
      {{{- end }}}
    steps:
      {{{ tmpl.Exec "prepare_build" }}}
      {{{ tmpl.Exec "prepare_worker" }}}
  {{{- if or $config.publishing_pipeline $config.push_cache }}}
      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
  {{{- end }}}
      {{{ tmpl.Exec "make" "deps_ci" }}}
      {{{ tmpl.Exec "make" "validate" }}}
      - name: Build packages ðŸ”§
        run: |
          export PATH=$PATH:/usr/local/go/bin
          mkdir build || true
          pushd ./.github
          go build -o build build.go
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
  {{{- if $config.publishing_pipeline }}}
      - name: Generate manifests
        run: |
          for f in build/*tar*; do
            [ -e "$f" ] || continue
            sudo -E luet mtree -- generate $f -o "$f.mtree"
          done
      - name: Append manifests to metadata
        run: |
          for f in build/*mtree; do
            [ -e "$f" ] || continue
            BASE_NAME=`basename -s .package.tar.zst.mtree $f`
            sudo -E .github/append_manifests.py build/$BASE_NAME.metadata.yaml $f mtree
          done
  {{{- end }}}
      {{{ tmpl.Exec "git_permissions" }}}
      {{{ tmpl.Exec "make" "create-repo" }}}
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: build-{{{ $flavor }}}-{{{ $config.arch }}}
          path: build
          if-no-files-found: error
      {{{ tmpl.Exec "runner_cleanup" }}}
{{{end}}}

{{{define "build_iso"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := index . "flavor" }}}
  {{{ $subset := index . "subset" }}}
  iso-{{{$subset}}}-{{{ $flavor }}}:
    runs-on: ubuntu-latest
    {{{- if not $config.skip_build }}}
    needs: build-{{{ $flavor }}}-{{{ $config.arch }}}
    {{{- end }}}
    env:
      FINAL_REPO: {{{$config.organization}}}/{{{$config.repository}}}-{{{ $flavor }}}{{{- if ne $config.arch "x86_64"}}}-{{{$config.arch}}}{{{end}}}
      FLAVOR: {{{ $flavor }}}
      ARCH: {{{ $config.arch }}}
    steps:
      {{{ tmpl.Exec "prepare_worker" }}}
      {{{ tmpl.Exec "make" "deps_ci" }}}
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-{{{ $flavor }}}-{{{ $config.arch }}}
          path: build
      - name: Add build repository
        run: |
          export DOCKER_INSTALL=true
          sudo -E make add_local_repo
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools mtools

      {{{ tmpl.Exec "cos_version" }}}
      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E MAKEISO_ARGS="--name cOS-Seed-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}" make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E MAKEISO_ARGS="--name cOS-Seed-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}" make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-{{{$subset}}}-{{{ $flavor }}}-{{{ $config.arch }}}.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
{{{ end }}}


{{{define "build_qemu"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := index . "flavor" }}}
  {{{ $subset := index . "subset" }}}
  qemu-{{{$subset}}}-{{{ $flavor }}}:
    runs-on: ubuntu-latest
    needs: iso-nonsquashfs-{{{ $flavor }}}
    env:
      FLAVOR: {{{ $flavor }}}
      ARCH: {{{ $config.arch }}}
      PKR_VAR_arch: {{{ $config.arch }}}
      PKR_VAR_flavor: {{{ $flavor }}}
      PKR_VAR_feature: vagrant
      PKR_VAR_accelerator: tcg
      PKR_VAR_cpus: 2
      PKR_VAR_memory: 4096
      {{{if eq $config.arch "arm64" }}}
      PKR_VAR_qemu_binary: qemu-system-aarch64
      PKR_VAR_firmware: /usr/share/qemu-efi-aarch64/QEMU_EFI.fd
      {{{if eq $subset "squashfs" }}}
      PACKER_TARGET: qemu.cos-arm64-squashfs
      {{{else}}}
      PACKER_TARGET: qemu.cos-arm64
      {{{- end}}}
      {{{else}}}
      {{{if eq $subset "squashfs" }}}
      PACKER_TARGET: qemu.cos-squashfs
      {{{else}}}
      PACKER_TARGET: qemu.cos
      {{{- end}}}
      {{{- end}}}
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-{{{ $flavor }}}-{{{ $config.arch }}}.iso.zip
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi
      - name: Install Packer
        uses: hashicorp-contrib/setup-packer@v1
        with:
            packer-version: 1.7.3
      - name: Build QEMU Image ðŸ”§
        run: |
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-{{{$subset}}}-{{{ $flavor }}}-QEMU-{{{ $config.arch }}}.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-{{{$subset}}}-{{{ $flavor }}}-QEMU-{{{ $config.arch }}}.box
          path: |
            packer/*.box
          if-no-files-found: error
{{{ end }}}

{{{define "build_vbox"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := index . "flavor" }}}
  {{{ $subset := index . "subset" }}}
  vbox-{{{$subset}}}-{{{ $flavor }}}:
    runs-on: macos-10.15
    needs: iso-nonsquashfs-{{{ $flavor }}}
    env:
      PKR_VAR_arch: {{{ $config.arch }}}
      PKR_VAR_flavor: {{{ $flavor }}}
      PKR_VAR_feature: vagrant
      {{{if eq $subset "squashfs" }}}
      PACKER_TARGET: virtualbox-iso.cos-squashfs
      {{{else}}}
      PACKER_TARGET: virtualbox-iso.cos
      {{{- end}}}
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-{{{ $flavor }}}-{{{ $config.arch }}}.iso.zip
      - name: Install deps
        run: |
            brew install yq
      - name: Build VBox Image ðŸ”§
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-{{{$subset}}}-{{{ $flavor }}}-vbox-{{{ $config.arch }}}.ova
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-{{{$subset}}}-{{{ $flavor }}}-vbox-{{{ $config.arch }}}.box
          path: |
            packer/*.box
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-Packer-{{{$subset}}}-{{{ $flavor }}}-vbox-{{{ $config.arch }}}.capture.zip
          path: capture.webm
          if-no-files-found: error
{{{ end }}}

{{{define "test"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := index . "flavor" }}}
  {{{ $subset := index . "subset" }}}
  tests-{{{$subset}}}-{{{ $flavor }}}:
    env:
      ARCH: {{{ $config.arch }}}
      {{{ if eq $config.arch "arm64" }}}
      VAGRANT_CPU: 2
      VAGRANT_MEMORY: 5120
      VAGRANT_FIRMWARE: /usr/share/AAVMF/AAVMF_CODE.fd
      COS_HOST: "192.168.122.50:22"
      COS_TIMEOUT: 1800
      {{{else}}}
      VAGRANT_CPU: 3
      VAGRANT_MEMORY: 10240
      {{{end}}}
    {{{ if eq $config.arch "arm64" }}}
    runs-on: ubuntu-latest
    needs: qemu-{{{$subset}}}-{{{ $flavor }}}
    {{{else}}}
    runs-on: macos-10.15
    needs: vbox-{{{$subset}}}-{{{ $flavor }}}
    {{{end}}}
    strategy:
      matrix:
        {{{ if eq $config.arch "arm64" }}}
        test: [{{{ join $config.run_tests ", "}}}]
        {{{else}}}
        test: ["test-features", "test-hooks", "test-smoke", "test-fallback", "test-recovery", "test-upgrades-images-signed", "test-upgrades-images-unsigned", "test-upgrades-local", "test-deploys-images-recovery" ]
        {{{end}}}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          {{{ if eq $config.arch "arm64" }}}
          name: cOS-Packer-{{{$subset}}}-{{{ $flavor }}}-QEMU-{{{ $config.arch }}}.box
          {{{else}}}
          name: cOS-Packer-{{{$subset}}}-{{{ $flavor }}}-vbox-{{{ $config.arch }}}.box
          {{{end}}}
          path: packer
      {{{ if eq $config.arch "arm64" }}}
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get remove -y apparmor*
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 vagrant make libvirt-daemon-system bridge-utils ovmf
      - name: Prepare libvirt
        run: |
          # Create bridge conf
          sudo mkdir -p /etc/qemu/
          echo "allow all" | sudo tee -a /etc/qemu/bridge.conf
          sudo chmod u+r /etc/qemu/bridge.conf
          sudo chmod u+s $(find /usr/ -name qemu-bridge-helper -print -quit|xargs)
          # Set a static ip for our VM
          sudo virsh net-update default add ip-dhcp-host "<host mac='52:54:00:00:00:01' name='jojo' ip='192.168.122.50' />" --live --config
      - name: Enable serial for default vagrant-libvirt machine
        run: |
          # vagrant-libvirt does not support adding serials from config yet so we need to modify the default template directly
          sudo sed -i "s|<serial type='pty'>|<serial type='file'><source path='$GITHUB_WORKSPACE/serial_log.log'/>|" $(sudo find /usr/share -name "domain.xml.erb" -print -quit|xargs)
      {{{end}}}
      - name: Prepare tests ðŸ”§
        run: |
          {{{ if ne $config.arch "arm64" }}}
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          {{{end}}}
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-clean
          make prepare-test
      - name: Run tests ðŸ”§
        run: |
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-{{{$subset}}}-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      {{{ if eq $config.arch "arm64" }}}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-{{{$subset}}}-${{ matrix.test }}.serial.zip
          path: serial_log.log
          if-no-files-found: warn
      {{{end}}}
      {{{ if ne $config.arch "arm64" }}}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-{{{$subset}}}-${{ matrix.test }}.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-{{{$subset}}}-${{ matrix.test }}.capture.zip
          path: capture.webm
          if-no-files-found: warn
      {{{end}}}
{{{ end }}}

{{{ define "installer_tests"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := index . "flavor" }}}
  {{{ $subset := index . "subset" }}}
  {{{- range slice "efi" "bios" }}}
  {{{ $variant := . }}}
  tests-{{{$subset}}}-{{{ $flavor }}}-installer-{{{$variant}}}:
    env:
      ARCH: {{{ $config.arch }}}
      COS_TIMEOUT: 800
    {{{- if eq $subset "squashfs" }}}
      PASSTHROUGH_ARGS: "-- --squashfs"
    {{{- end }}}
    runs-on: macos-10.15
    needs: iso-nonsquashfs-{{{ $flavor }}}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-{{{ $flavor }}}-{{{ $config.arch }}}.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_{{{$variant}}}
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-{{{$variant}}}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-{{{$subset}}}-test-installer-{{{$variant}}}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-{{{$subset}}}-test-installer-{{{$variant}}}.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-{{{$subset}}}-test-installer-{{{$variant}}}.record.zip
          path: capture.webm
          if-no-files-found: warn
  {{{- end}}}
{{{end}}}

{{{define "publish_packages"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := . }}}
  publish-{{{ $flavor }}}:
    runs-on: ubuntu-latest
    {{{- if or $config.skip_tests (has $config.skip_tests_flavor $flavor) }}}
    needs: 
    {{{- if not $config.skip_build }}}
    - build-{{{ $flavor }}}-{{{ $config.arch }}}
    {{{- end }}}
    {{{- if not ( has $config.skip_images_flavor $flavor ) }}}
    - iso-squashfs-{{{ $flavor }}}
    {{{- end }}}
    {{{- else }}}
    needs: tests-squashfs-{{{ $flavor }}}
    {{{- end }}}
    permissions:
      id-token: write  # undocumented OIDC support.
    env:
      FLAVOR: {{{ $flavor }}}
      ARCH: {{{ $config.arch }}}
      FINAL_REPO: {{{$config.organization}}}/{{{$config.repository}}}-{{{ $flavor }}}{{{- if ne $config.arch "x86_64"}}}-{{{$config.arch}}}{{{end}}}
      DOWNLOAD_METADATA: true
      DOWNLOAD_ONLY: true
      DOWNLOAD_FATAL_MISSING_PACKAGES: true
      {{{- if has $config "luet_install_from_cos_repo" }}}
      LUET_INSTALL_FROM_COS_REPO: {{{ $config.luet_install_from_cos_repo }}}
      {{{- end }}}
      COSIGN_EXPERIMENTAL: 1 # use keyless signing
      COSIGN_REPOSITORY: raccos/releases-{{{ $flavor }}}
      PUBLISH_ARGS: "--plugin luet-cosign"
      COSIGN_FULCIO_URL: "https://v1.fulcio.sigstore.dev"
    steps:
      {{{ tmpl.Exec "prepare_build" }}}
      {{{ tmpl.Exec "prepare_worker" }}}
      {{{- if or $config.publishing_pipeline $config.push_cache }}}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to Quay.io
        uses: docker/login-action@v1
        with:
            registry: quay.io
            username: ${{ secrets.QUAY_USERNAME }}
            password: ${{ secrets.QUAY_PASSWORD }}
      {{{- end }}}
      {{{ tmpl.Exec "make" "deps_ci" }}}
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-{{{ $flavor }}}-{{{ $config.arch }}}
          path: build
      - name: Add build repository
        run: |
          export DOCKER_INSTALL=true
          sudo -E make add_local_repo
      - name: Grab metadata from remotes
        run: |
          export PATH=$PATH:/usr/local/go/bin
          pushd ./.github
          go build -o build build.go
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
      {{{ tmpl.Exec "git_permissions" }}}
      - name: Publish to DockerHub ðŸš€
        run: |
          sudo -E make publish-repo
      - name: upload cosign logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: luetcosign.log.zip
          path: /tmp/luet-cosign.log
          if-no-files-found: warn

{{{ end }}}

{{{define "generate_repo_files"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := . }}}
  generate-repo-files-{{{ $flavor }}}:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - publish-{{{ $flavor }}}
    env:
      LUET_REPO_ARCH: {{{ if eq $config.arch "x86_64"}}}amd64{{{else}}}{{{$config.arch}}}{{{end}}}
      FINAL_REPO: {{{$config.organization}}}/{{{$config.repository}}}-{{{ $flavor }}}{{{- if ne $config.arch "x86_64"}}}-{{{$config.arch}}}{{{end}}}
    steps:
      - uses: actions/checkout@v2
      - uses: mikefarah/yq@v4.25.1
      - run: |
          yq '.urls = ["${{ env.FINAL_REPO }}"]' .github/cos.yaml.template | yq '.reference = "${{ github.ref_name }}-repository.yaml"' | yq '.arch = "${{ env.LUET_REPO_ARCH }}"'> cos-repo-{{{ $config.arch }}}.yaml
      - name: upload repo file
        uses: actions/upload-artifact@v2
        with:
          path: cos-{{{ $config.arch }}}.yaml
{{{ end }}}


{{{define "github_release"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := . }}}

  github-release-{{{ $flavor }}}:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: 
    {{{- if not $config.skip_build }}}
    - build-{{{ $flavor }}}-{{{ $config.arch }}}
    {{{- end }}}
    {{{- if and $config.skip_images_flavor (has $config.skip_images_flavor $flavor) }}}
    {{{- else }}}
    {{{- if $config.build_raw_image }}}
    - raw-images-{{{ $flavor }}}
    {{{- end }}}
    {{{- if $config.build_image_vbox }}}
    - vbox-nonsquashfs-{{{ $flavor }}}
    {{{- end }}}
    {{{- if $config.build_image_qemu }}}
    - qemu-nonsquashfs-{{{ $flavor }}}
    {{{- end }}}
    - iso-nonsquashfs-{{{ $flavor }}}
    {{{- end }}}
    - image-link-{{{ $flavor }}}
    {{{- if or $config.skip_tests (has $config.skip_tests_flavor $flavor) }}}
    {{{- else }}}
    - tests-nonsquashfs-{{{ $flavor }}}
    - tests-squashfs-{{{ $flavor }}}
    {{{- end }}}
    {{{- if $config.publish_cloud }}}
    - publish-vanilla-ami
    {{{- end }}}
    - generate-repo-files-{{{ $flavor }}}
    env:
      FLAVOR: {{{ $flavor }}}
      ARCH: {{{ $config.arch }}}
    {{{- if has $config "luet_install_from_cos_repo" }}}
      LUET_INSTALL_FROM_COS_REPO: {{{ $config.luet_install_from_cos_repo }}}
    {{{- end }}}
    steps:
      - uses: actions/checkout@v2
      {{{ tmpl.Exec "make" "deps_ci" }}}
      {{{ tmpl.Exec "cos_version" }}}
      {{{- if and $config.skip_images_flavor (has $config.skip_images_flavor $flavor) }}}
      {{{- else }}}
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-{{{ $flavor }}}-{{{ $config.arch }}}.iso.zip
          path: iso-release
      {{{- if $config.build_image_vbox }}}
      - name: Download vagrant box (vbox)
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-{{{ $flavor }}}-vbox-{{{ $config.arch }}}.box
          path: release
      - name: Download OVA image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-{{{ $flavor }}}-vbox-{{{ $config.arch }}}.ova
          path: release
      {{{- end }}}
      {{{- if $config.build_image_qemu }}}
      - name: Download vagrant box (qemu)
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-{{{ $flavor }}}-QEMU-{{{ $config.arch }}}.box
          path: release
      - name: Download QCOW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-{{{ $flavor }}}-QEMU-{{{ $config.arch }}}.qcow
          path: release
      {{{- end }}}
      {{{- if $config.build_raw_image }}}
      - name: Download GCE RAW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-GCE-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}
          path: release
      - name: Download AZURE RAW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-AZURE-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}
          path: release
      - name: Download RAW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-RAW-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}
          path: release
      {{{- end }}}
      {{{- end}}}
      - name: Download Image links
        uses: actions/download-artifact@v2
        with:
          name: images-{{{ $flavor }}}-{{{ $config.arch }}}.txt
          path: release
      {{{- if $config.publish_cloud }}}
      - uses: actions/download-artifact@v2
        with:
          name: ami-id-vanilla-${{ env.COS_VERSION }}.txt
          path: release
      {{{- end }}}
      - uses: actions/download-artifact@v2
        with:
          name: cos-repo-{{{ $config.arch }}}.yaml
          path: release
      - name: Release
        uses: fnkr/github-action-ghr@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GHR_COMPRESS: xz
          GHR_PATH: release/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Release ISO
        uses: fnkr/github-action-ghr@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GHR_PATH: iso-release/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
{{{ end }}}

{{{define "raw_image"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := . }}}
  raw-images-{{{ $flavor }}}:
    {{{ tmpl.Exec "runner" }}}

    {{{- if not $config.skip_build }}}
    needs:
    - build-{{{ $flavor }}}-{{{ $config.arch }}}
    {{{- end }}}
    env:
      ARCH: {{{ $config.arch }}}
      LUET_ARCH: {{{ $config.arch }}}
    steps:
    {{{ tmpl.Exec "runner_cleanup" }}}
      - name: Install OS deps
        run: |
          sudo apt-get update
          sudo apt-get install -y bc sudo curl e2fsprogs dosfstools mtools squashfs-tools gdisk make tar gzip xz-utils
      - uses: actions/checkout@v2
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-{{{ $flavor }}}-{{{ $config.arch }}}
          path: build
      - name: Add build repository
        run: |
          export DOCKER_INSTALL=true
          sudo -E make add_local_repo
      {{{ tmpl.Exec "make" "deps_ci" }}}
      {{{ tmpl.Exec "cos_version" }}}
      {{{ tmpl.Exec "make" "raw_disk" }}}
      {{{ tmpl.Exec "make" "azure_disk" }}}
      {{{ tmpl.Exec "make" "gce_disk" }}}
      - name: Rename images
        run: |
          mv disk.raw cOS-Vanilla-RAW-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}.raw
          mv disk.raw.vhd cOS-Vanilla-AZURE-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}.vhd
          mv disk.raw.tar.gz cOS-Vanilla-GCE-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-RAW-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}
          path: |
            cOS-Vanilla-RAW-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}.raw
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-AZURE-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}
          path: |
            cOS-Vanilla-AZURE-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}.vhd
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-GCE-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}
          path: |
            cOS-Vanilla-GCE-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}.tar.gz
          if-no-files-found: error
      - name: cleanup leftovers
        if: always()
        run: sudo rm -rf ./*.part grub_efi.cfg root .luet.yaml oem efi || true
{{{ end }}}

{{{define "raw_image_test_deploy"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := . }}}
  tests-raw-disk-deploy-{{{ $flavor }}}:
    runs-on: macos-10.15
    needs: raw-images-{{{ $flavor }}}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Install deps
        run: brew install yq cdrtools
      - name: Export cos version
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Download RAW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-RAW-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          PATH=$PATH:$GOPATH/bin
          sudo -E make raw_disk_test_deploy
      - name: Change logs ownership
        if: failure()
        run: |
          USER_ID=$(id -u)
          GROUP_ID=$(id -g)
          sudo chown $USER_ID:$GROUP_ID serial_port1.log
          sudo chown $USER_ID:$GROUP_ID capture.webm || true
          sudo chmod 777 serial_port1.log
          sudo chmod 777 capture.webm || true
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-{{{ $flavor }}}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-{{{ $flavor }}}.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-{{{ $flavor }}}.capture.zip
          path: capture.webm
          if-no-files-found: warn
{{{ end }}}

{{{define "ami_publish"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := . }}}
  ami-publish-{{{ $flavor }}}:
    runs-on: ubuntu-latest
    needs: publish-vanilla-ami
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      PKR_VAR_flavor: {{{ $flavor }}}
      PKR_VAR_git_sha: "${GITHUB_SHA}"
      PACKER_TARGET: amazon-ebs.cos
    steps:
      - uses: actions/checkout@v2
      {{{ tmpl.Exec "make" "deps_ci" }}}
      - name: Public IP
        id: ip
        uses: haythem/public-ip@v1.2
      - name: Build AMI for {{{ $flavor }}}
        run: |
            source .github/helpers.sh
            export PKR_VAR_cos_version=$(cos_package_version)
            export PKR_VAR_aws_temporary_security_group_source_cidr="${{ steps.ip.outputs.ipv4 }}/32"
            export PKR_VAR_cos_deploy_args="cos-deploy {{{ if (ne $flavor "teal") }}}--no-verify {{{ end }}}--docker-image {{{$config.organization}}}/{{{$config.repository}}}-{{{ $flavor }}}:cos-system-${COS_VERSION}"
            make packer
{{{ end }}}

{{{define "image_link"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := . }}}
  image-link-{{{ $flavor }}}:
    runs-on: ubuntu-latest
    needs: publish-{{{$flavor}}}
    steps:
      - uses: actions/checkout@v2
      {{{ tmpl.Exec "make" "deps_ci" }}}
      - name: Generate link for {{{ $flavor }}}
        run: |
            source .github/helpers.sh
            PACKAGE_VERSION=$(cos_package_version)
            export COS_VERSION="${PACKAGE_VERSION/+/-}"
            echo "{{{$config.organization}}}/{{{$config.repository}}}-{{{ $flavor }}}{{{- if ne $config.arch "x86_64"}}}-{{{$config.arch}}}{{{end}}}:cos-system-${COS_VERSION}" > images-{{{ $flavor }}}-{{{ $config.arch }}}.txt
      - uses: actions/upload-artifact@v2
        with:
          name: images-{{{ $flavor }}}-{{{$config.arch}}}.txt
          path: |
            images-{{{ $flavor }}}-{{{$config.arch}}}.txt
{{{ end }}}

{{{define "publish_vanilla"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $flavor := "teal" }}}
  # We need only a single vanilla image for any OS
  # Vanilla image is always based on openSUSE
  publish-vanilla-ami:
    runs-on: ubuntu-latest
    {{{- if or $config.skip_tests (has $config.skip_tests_flavor $flavor) }}}
    needs: raw-images-{{{ $flavor }}}
    {{{- else }}}
    needs: [raw-images-{{{ $flavor }}}, tests-squashfs-{{{ $flavor }}}]
    {{{- end }}}

    steps:
      - uses: actions/checkout@v2
      {{{ tmpl.Exec "make" "deps_ci" }}}
      {{{ tmpl.Exec "cos_version" }}}
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-RAW-{{{ $flavor }}}-${{ env.COS_VERSION }}-{{{ $config.arch }}}
          path: .
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Upload and publish vanilla image
        run: |
          export github_sha="${GITHUB_SHA}"
          export COPY_AMI_ALL_REGIONS="true"
          export COS_VERSION="${COS_VERSION/+/-}"
          export AWS_DISK_NAME="cOS-Vanilla-$COS_VERSION-{{{ $config.arch }}}"
          make aws_vanilla_ami
      - uses: actions/upload-artifact@v2
        with:
          name: ami-id-vanilla-${{ env.COS_VERSION }}.txt
          path: |
            ami_id.txt
{{{ end }}}

{{{define "build_example_dir"}}}
  {{{ $config := (datasource "config") }}}
  {{{ $dir := . }}}
  docker-build-example-{{{ $dir }}}:
    {{{ tmpl.Exec "runner" }}}
    {{{tmpl.Exec "if_with_labels" }}}
    steps:
      {{{ tmpl.Exec "prepare_worker" }}}
      {{{ tmpl.Exec "prepare_build" }}}
      {{{ tmpl.Exec "make" "deps_ci" }}}
      - name: Build {{{ $dir }}} ðŸ”§
        shell: 'script -q -e -c "bash {0}"'
        run: |
          cd examples/{{{ $dir }}}
          docker build . -t {{{ $dir }}}:latest
      - name: Dump {{{ $dir }}} image
        shell: 'script -q -e -c "bash {0}"'
        run: |
          docker save {{{ $dir }}}:latest -o {{{ $dir }}}.tar
      - uses: actions/upload-artifact@v2
        with:
          name: {{{ $dir }}}.tar
          path: |
            {{{ $dir }}}.tar
{{{end}}}


{{{define "toolchain_images_steps"}}}
{{{ $tag := . }}}
      {{{ tmpl.Exec "prepare_worker" }}}
      {{{ tmpl.Exec "make" "deps_ci" }}}
      {{{ tmpl.Exec "cos_version" }}}
      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Build  ðŸ”§
        run: |
          tag="{{{$tag}}}"
          export P_VERSION="${tag/+/-}"
          docker build -t quay.io/costoolkit/toolchain:$P_VERSION .
          docker push quay.io/costoolkit/toolchain:$P_VERSION
{{{end}}}

{{{define "toolchain_images"}}}
{{{ $config := (datasource "config") }}}
{{{ $flavor := "teal" }}}
{{{- if and $config.publishing_pipeline $config.publish_toolchain }}}
  build-toolchain-tagged:
    if: startsWith(github.ref, 'refs/tags/')
    {{{ tmpl.Exec "runner" }}}
    needs: publish-{{{$flavor}}}
    steps:
      {{{tmpl.Exec "toolchain_images_steps" "${{ env.COS_VERSION }}"}}}
  build-toolchain-latest:
    if: "!startsWith(github.ref, 'refs/tags/')"
    {{{ tmpl.Exec "runner" }}}
    needs: publish-{{{$flavor}}}
    steps:
      {{{tmpl.Exec "toolchain_images_steps" "latest"}}}
{{{- end}}}
{{{end}}}


{{{define "framework_images_steps"}}}
{{{ $tag := . }}}
      {{{ tmpl.Exec "prepare_worker" }}}
      {{{ tmpl.Exec "make" "deps_ci" }}}
      {{{ tmpl.Exec "cos_version" }}}
      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Prepare
        id: prep
        run: |
          tag="{{{$tag}}}"
          P_VERSION="${tag/+/-}"
          # Set output parameters.
          echo ::set-output name=tags::quay.io/costoolkit/framework:${P_VERSION}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./images/framework
          file: ./images/framework/Dockerfile
          platforms: "linux/arm64,linux/amd64"
          push: true
          tags: ${{ steps.prep.outputs.tags }}
{{{end}}}

{{{define "framework_images"}}}
{{{ $config := (datasource "config") }}}
{{{ $flavor := "teal" }}}
{{{- if and $config.publishing_pipeline $config.publish_toolchain }}}
  build-framework-tagged:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: publish-{{{$flavor}}}
    steps:
      {{{tmpl.Exec "framework_images_steps" "${{ env.COS_VERSION }}"}}}
  build-framework-latest:
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    needs: publish-{{{$flavor}}}
    steps:
      {{{tmpl.Exec "framework_images_steps" "latest"}}}
{{{- end}}}
{{{end}}}

name: {{{$config.pipeline}}}-{{{ $config.flavor }}}-{{{ $config.arch }}}

on: 
{{{$config.on | toYAML | indent 1 }}}

concurrency:
  group: ci-{{{$config.pipeline}}}-{{{ $config.flavor }}}-{{{ $config.arch }}}-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true

jobs:
{{{- if (has $config "build_examples_dir") }}}
  {{{- range $config.build_examples_dir }}}
    {{{$dir:=.}}}
    {{{tmpl.Exec "build_example_dir" $dir}}}
  {{{- end }}}
{{{- end}}}
{{{- with $flavor := $config.flavor }}}

  {{{- if not $config.skip_docker_build }}}
  {{{tmpl.Exec "docker_build_packages" $flavor}}}
  {{{- end }}}

  {{{- if not $config.skip_build }}}
  {{{tmpl.Exec "build_packages" $flavor}}}
  {{{- end }}}

  {{{- if not (has $config.skip_images_flavor $flavor) }}}
{{{ $context := coll.Dict "flavor" $flavor "subset" "nonsquashfs" }}}
  {{{ tmpl.Exec "build_iso" $context }}}
  {{{- end}}}

  {{{- range slice "squashfs" "nonsquashfs" }}}

    {{{- $subset:=. }}}
    {{{ $context := coll.Dict "flavor" $flavor "subset" $subset }}}

    {{{- if not (has $config.skip_images_flavor $flavor) }}}
        {{{- if has $config "run_installer_test" }}}
            {{{- if $config.run_installer_test }}}
  {{{ tmpl.Exec "installer_tests" $context }}}
            {{{- end}}}
        {{{- end}}}
        {{{- if $config.build_image_qemu }}}
  {{{ tmpl.Exec "build_qemu" $context }}}
        {{{- end }}}
        {{{- if $config.build_image_vbox }}}
  {{{ tmpl.Exec "build_vbox" $context }}}
        {{{- end }}}
    {{{- end }}}

    {{{- if not (or $config.skip_tests (has $config.skip_tests_flavor $flavor)) }}}
  {{{ tmpl.Exec "test" $context }}}
    {{{- end}}}

  {{{- end}}}

  {{{- if $config.publishing_pipeline }}}
  {{{tmpl.Exec "image_link" $flavor}}}
  {{{tmpl.Exec "publish_packages" $flavor}}}
  {{{- if has $config.release_flavor $flavor }}}
  {{{tmpl.Exec "generate_repo_files" $flavor}}}
  {{{tmpl.Exec "github_release" $flavor}}}
  {{{- end }}}
  {{{- end }}}

    {{{- if $config.build_raw_image }}}
  {{{tmpl.Exec "raw_image" $flavor}}}
        {{{- if $config.run_raw_image_test }}}
  {{{tmpl.Exec "raw_image_test_deploy" $flavor}}}
        {{{- end }}}
    {{{- end }}}

      {{{- if $config.publish_cloud }}}
  {{{tmpl.Exec "ami_publish" $flavor}}}
      {{{- end }}}
{{{- end }}}

{{{tmpl.Exec "toolchain_images"}}}
{{{tmpl.Exec "framework_images"}}}
{{{- if $config.publish_cloud }}}
{{{tmpl.Exec "publish_vanilla"}}}
{{{- end }}}
