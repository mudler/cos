name: PR-green-x86_64
on: 
 pull_request:
   paths:
     - conf/**
     - packages/**
     - make/**
     - .github/**
     - Makefile
     - tests/**
concurrency:
  group: ci-PR-green-x86_64-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true
jobs:
  build-green-x86_64:
    runs-on: [self-hosted, x64]
    if: contains(fromJson('["mudler", "davidcassany", "itxaka", "kkaempf", "cOS-cibot"]'), github.actor)
    env:
      LUET_ARCH: x86_64
      FLAVOR: green
      ARCH: x86_64
      FINAL_REPO: quay.io/costoolkit/releases-green
      DOWNLOAD_METADATA: false
      PUSH_CACHE: false
      REPO_CACHE: quay.io/costoolkit/build-green-cache
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          docker system prune -f -a --volumes || true
      - name: Install Go
        run: |
          curl -L https://golang.org/dl/go1.17.5.linux-amd64.tar.gz -o go1.17.5.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.17.5.linux-amd64.tar.gz
      - name: Install make
        run: |
            sudo apt-get update
            sudo apt-get install -y make
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Run make deps
        run: |
          sudo -E make deps
      - name: Run make validate
        run: |
          sudo -E make validate
      - name: Build packages ðŸ”§
        run: |
          export PATH=$PATH:/usr/local/go/bin
          mkdir build || true
          pushd ./.github
          go build -o build build.go
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
      - name: Run make create-repo
        run: |
          sudo -E make create-repo
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: build-green-x86_64
          path: build
          if-no-files-found: error
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          docker system prune -f -a --volumes || true
  iso-squashfs-green:
    runs-on: ubuntu-latest
    needs: build-green-x86_64
    env:
      FINAL_REPO: quay.io/costoolkit/releases-green
      FLAVOR: green
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-green-x86_64
          path: build
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools
      - name: Run make deps
        run: |
          sudo -E make deps
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          source .github/helpers.sh
          create_remote_manifest manifest.yaml
          sudo -E MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-x86_64" MANIFEST=manifest.yaml.remote make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E YQ=/usr/bin/yq MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-x86_64" make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-squashfs-green-x86_64.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
  tests-squashfs-green-installer-efi:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 800
    runs-on: macos-10.15
    needs: iso-squashfs-green
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-squashfs-green-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_efi
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-efi
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-efi.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-efi.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-efi.record.zip
          path: capture.webm
          if-no-files-found: warn
  tests-squashfs-green-installer-bios:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 800
    runs-on: macos-10.15
    needs: iso-squashfs-green
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-squashfs-green-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_bios
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-bios
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-bios.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-bios.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-bios.record.zip
          path: capture.webm
          if-no-files-found: warn
  qemu-squashfs-green:
    runs-on: ubuntu-latest
    needs: iso-squashfs-green
    env:
      FLAVOR: green
      ARCH: x86_64
      PKR_VAR_arch: x86_64
      PKR_VAR_flavor: green
      PKR_VAR_feature: vagrant
      PKR_VAR_accelerator: none
      PKR_VAR_cpus: 2
      PKR_VAR_memory: 4096
      PACKER_TARGET: qemu.cos
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-squashfs-green-x86_64.iso.zip
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi
      - name: Build QEMU Image ðŸ”§
        run: |
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-green-QEMU-x86_64.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-green-QEMU-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
  vbox-squashfs-green:
    runs-on: macos-10.15
    needs: iso-squashfs-green
    env:
      PKR_VAR_arch: x86_64
      PKR_VAR_flavor: green
      PKR_VAR_feature: vagrant
      PACKER_TARGET: virtualbox-iso.cos
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-squashfs-green-x86_64.iso.zip
      - name: Install deps
        run: |
            brew install yq
      - name: Build VBox Image ðŸ”§
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-green-vbox-x86_64.ova
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-green-vbox-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-Packer-squashfs-green-vbox-x86_64.capture.zip
          path: capture.webm
          if-no-files-found: error
  tests-squashfs-green:
    env:
      ARCH: x86_64
      VAGRANT_CPU: 3
      VAGRANT_MEMORY: 10240
    runs-on: macos-10.15
    needs: vbox-squashfs-green
    strategy:
      matrix:
        test: ["test-features", "test-hooks", "test-smoke", "test-fallback", "test-recovery", "test-upgrades-images-signed", "test-upgrades-images-unsigned", "test-upgrades-local", "test-deploys-images-active", "test-deploys-images-recovery" ]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-squashfs-green-vbox-x86_64.box
          path: packer
      - name: Prepare tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-clean
          make prepare-test
      - name: Run tests ðŸ”§
        run: |
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.capture.zip
          path: capture.webm
          if-no-files-found: warn
  iso-nonsquashfs-green:
    runs-on: ubuntu-latest
    needs: build-green-x86_64
    env:
      FINAL_REPO: quay.io/costoolkit/releases-green
      FLAVOR: green
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-green-x86_64
          path: build
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools
      - name: Run make deps
        run: |
          sudo -E make deps
      - name: Tweak manifest and drop squashfs recovery
        run: |
          source .github/helpers.sh
          drop_recovery manifest.yaml
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          source .github/helpers.sh
          create_remote_manifest manifest.yaml
          sudo -E MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-x86_64" MANIFEST=manifest.yaml.remote make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E YQ=/usr/bin/yq MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-x86_64" make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nonsquashfs-green-x86_64.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
  tests-nonsquashfs-green-installer-efi:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 800
    runs-on: macos-10.15
    needs: iso-nonsquashfs-green
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-green-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_efi
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-efi
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-efi.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-efi.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-efi.record.zip
          path: capture.webm
          if-no-files-found: warn
  tests-nonsquashfs-green-installer-bios:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 800
    runs-on: macos-10.15
    needs: iso-nonsquashfs-green
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-green-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_bios
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-bios
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-bios.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-bios.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-bios.record.zip
          path: capture.webm
          if-no-files-found: warn
  qemu-nonsquashfs-green:
    runs-on: ubuntu-latest
    needs: iso-nonsquashfs-green
    env:
      FLAVOR: green
      ARCH: x86_64
      PKR_VAR_arch: x86_64
      PKR_VAR_flavor: green
      PKR_VAR_feature: vagrant
      PKR_VAR_accelerator: none
      PKR_VAR_cpus: 2
      PKR_VAR_memory: 4096
      PACKER_TARGET: qemu.cos
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-green-x86_64.iso.zip
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi
      - name: Build QEMU Image ðŸ”§
        run: |
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-green-QEMU-x86_64.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-green-QEMU-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
  vbox-nonsquashfs-green:
    runs-on: macos-10.15
    needs: iso-nonsquashfs-green
    env:
      PKR_VAR_arch: x86_64
      PKR_VAR_flavor: green
      PKR_VAR_feature: vagrant
      PACKER_TARGET: virtualbox-iso.cos
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-green-x86_64.iso.zip
      - name: Install deps
        run: |
            brew install yq
      - name: Build VBox Image ðŸ”§
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-green-vbox-x86_64.ova
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-green-vbox-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-Packer-nonsquashfs-green-vbox-x86_64.capture.zip
          path: capture.webm
          if-no-files-found: error
  tests-nonsquashfs-green:
    env:
      ARCH: x86_64
      VAGRANT_CPU: 3
      VAGRANT_MEMORY: 10240
    runs-on: macos-10.15
    needs: vbox-nonsquashfs-green
    strategy:
      matrix:
        test: ["test-features", "test-hooks", "test-smoke", "test-fallback", "test-recovery", "test-upgrades-images-signed", "test-upgrades-images-unsigned", "test-upgrades-local", "test-deploys-images-active", "test-deploys-images-recovery" ]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-green-vbox-x86_64.box
          path: packer
      - name: Prepare tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-clean
          make prepare-test
      - name: Run tests ðŸ”§
        run: |
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.capture.zip
          path: capture.webm
          if-no-files-found: warn
  raw-images-green:
    runs-on: [self-hosted, x64]
    needs:
    - build-green-x86_64
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          docker system prune -f -a --volumes || true
      - name: Install OS deps
        run: |
          sudo apt-get update
          sudo apt-get install -y bc qemu-utils sudo curl e2fsprogs dosfstools mtools squashfs-tools gdisk make tar gzip xz-utils
      - uses: actions/checkout@v2
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-green-x86_64
          path: build
      - name: Run make deps
        run: |
          sudo -E make deps
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Run make raw_disk
        run: |
          sudo -E make raw_disk
      - name: Run make azure_disk
        run: |
          sudo -E make azure_disk
      - name: Run make gce_disk
        run: |
          sudo -E make gce_disk
      - name: Rename images
        run: |
          mv disk.raw cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64.raw
          mv disk.vhd cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-x86_64.vhd
          mv disk.raw.tar.gz cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-x86_64.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64.raw
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-x86_64.vhd
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-x86_64.tar.gz
          if-no-files-found: error
  tests-raw-disk-deploy-green:
    runs-on: macos-10.15
    needs: raw-images-green
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Install deps
        run: brew install yq cdrtools
      - name: Export cos version
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Download RAW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          PATH=$PATH:$GOPATH/bin
          sudo -E make raw_disk_test_deploy
      - name: Change logs ownership
        if: failure()
        run: |
          USER_ID=$(id -u)
          GROUP_ID=$(id -g)
          sudo chown $USER_ID:$GROUP_ID serial_port1.log
          sudo chown $USER_ID:$GROUP_ID capture.webm || true
          sudo chmod 777 serial_port1.log
          sudo chmod 777 capture.webm || true
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-green.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-green.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-green.capture.zip
          path: capture.webm
          if-no-files-found: warn
