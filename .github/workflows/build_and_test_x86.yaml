name: Build & test x86_64

on:
  workflow_call:
    inputs:
      flavor:
        required: true
        type: string

concurrency:
  group: ci-${{ inputs.flavor }}-x86_64-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true

jobs:
  # detect step checks what machines the later steps should run on
  detect:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.detect.outputs.tests }}
    steps:
      - id: detect
        env:
          FLAVOR: ${{ inputs.flavor }}
        run: |
          if [ "${FLAVOR}" == green ]; then
            echo "tests=['test-upgrade', 'test-recovery', 'test-fallback', 'test-fsck', 'test-grubfallback']" >> $GITHUB_OUTPUT
          else
            echo "tests=['test-active']" >> $GITHUB_OUTPUT
          fi


  build-iso:
    needs: detect
    runs-on: ubuntu-latest
    env:
      FLAVOR: ${{ inputs.flavor }}
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: Cached ISO
        id: cache-iso
        uses: actions/cache/restore@v3
        env:
          cache-name: pr-iso-build-x86_64-${{ inputs.flavor }}
          enableCrossOsArchive: true
          lookup-only: true
        with:
          path: /tmp/*.iso
          key: ${{ env.cache-name }}-${{ hashFiles('Dockerfile', '**/go.sum', '**/pkg/**', '**/examples/**', '**/cmd/**', '**/vendor/**', '**/Makefile', '**/main.go') }}
      - if: ${{ steps.cache-iso.outputs.cache-hit != 'true' }}
        name: Build toolkit
        run: |
          make build
      - if: ${{ steps.cache-iso.outputs.cache-hit != 'true' }}
        name: Build ISO
        run: |
          make build-iso
          sudo mv build/elemental-${{ env.FLAVOR }}.${{ env.ARCH}}.iso /tmp/
      - if: ${{ steps.cache-iso.outputs.cache-hit != 'true' }}
        name: Save ISO
        id: save-iso
        uses: actions/cache/save@v3
        env:
          cache-name: pr-iso-build-x86_64-${{ inputs.flavor }}
        with:
          path: /tmp/*.iso
          key: ${{ env.cache-name }}-${{ hashFiles('Dockerfile', '**/go.sum', '**/pkg/**', '**/examples/**', '**/cmd/**', '**/vendor/**', '**/Makefile', '**/main.go') }}
          enableCrossOsArchive: true

  build-disk:
    needs: detect
    runs-on: ubuntu-latest
    env:
      FLAVOR: ${{ inputs.flavor }}
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: Checks cached Disk
        uses: actions/cache/restore@v3
        id: cache-check
        env:
          cache-name: pr-disk-build-x86_64-${{ inputs.flavor }}
        with:
          path: /tmp/*.qcow2
          key: ${{ env.cache-name }}-${{ hashFiles('Dockerfile', '**/go.sum', '**/pkg/**', '**/examples/**', '**/cmd/**', '**/vendor/**', '**/Makefile', '**/main.go') }}
          enableCrossOsArchive: true
          lookup-only: true
      - if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        name: Cleanup worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
          sudo df -h
      - if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        name: Build toolkit
        run: |
          make build
      - if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        name: Install to disk
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends qemu-utils coreutils
          make ARCH=${{ env.ARCH }} build-os
          sudo -E make ARCH=${{ env.ARCH }} build-disk
          sudo mv build/elemental-${{ env.FLAVOR }}.${{ env.ARCH}}.qcow2 /tmp/
      - if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        name: Save cached disk
        id: cache-disk
        uses: actions/cache/save@v3
        env:
          cache-name: pr-disk-build-x86_64-${{ inputs.flavor }}
        with:
          path: /tmp/*.qcow2
          key: ${{ env.cache-name }}-${{ hashFiles('Dockerfile', '**/go.sum', '**/pkg/**', '**/examples/**', '**/cmd/**', '**/vendor/**', '**/Makefile', '**/main.go') }}
          enableCrossOsArchive: true

  tests-matrix:
    needs:
      - build-disk
      - detect
    runs-on: macos-latest
    env:
      FLAVOR: ${{ inputs.flavor }}
      ARCH: x86_64
      COS_TIMEOUT: 1600
    strategy:
      matrix:
        test: ${{ fromJson(needs.detect.outputs.tests) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Install deps
        run: |
          make test-deps
      - run: |
          git fetch --prune --unshallow
      - name: Cached Disk
        id: cache-disk
        uses: actions/cache/restore@v3
        env:
          cache-name: pr-disk-build-x86_64-${{ inputs.flavor }}
        with:
          path: /tmp/*.qcow2
          key: ${{ env.cache-name }}-${{ hashFiles('Dockerfile', '**/go.sum', '**/pkg/**', '**/examples/**', '**/cmd/**', '**/vendor/**', '**/Makefile', '**/main.go') }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - name: Run VM script dependencies
        run: |
          brew install bash coreutils
      - name: Run ${{ matrix.test }}
        run: |
          make DISK=/tmp/elemental-${{ env.FLAVOR }}.${{ env.ARCH}}.qcow2 ELMNTL_ACCEL=hvf ELMNTL_TARGETARCH=${{ env.ARCH }} ELMNTL_FIRMWARE=$(find /usr/local/Cellar/qemu -name edk2-${{ env.ARCH }}-code.fd -print -quit) ${{ matrix.test }}
      - name: Upload serial console for ${{ matrix.test }}
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: serial-${{ env.ARCH }}-${{ env.FLAVOR }}-${{ matrix.test }}.log
          path: tests/serial.log
          if-no-files-found: error
      - name: Upload qemu stdout for ${{ matrix.test }}
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: vmstdout-${{ env.ARCH }}-${{ env.FLAVOR }}-${{ matrix.test }}.log
          path: tests/vmstdout
          if-no-files-found: error
      - name: Stop test VM
        if: always()
        run: |
          make test-clean

  test-installer:
    needs:
      - build-iso
      - detect
    runs-on: macos-latest
    env:
      FLAVOR: ${{ inputs.flavor }}
      ARCH: x86_64
      COS_TIMEOUT: 1600
    steps:
      - uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Install deps
        run: |
          make test-deps
      - run: |
          git fetch --prune --unshallow
      - name: Cached ISO
        id: cache-iso
        uses: actions/cache/restore@v3
        env:
          cache-name: pr-iso-build-x86_64-${{ inputs.flavor }}
        with:
          path: /tmp/*.iso
          key: ${{ env.cache-name }}-${{ hashFiles('Dockerfile', '**/go.sum', '**/pkg/**', '**/examples/**', '**/cmd/**', '**/vendor/**', '**/Makefile', '**/main.go') }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - name: Run VM script dependencies
        run: |
          brew install bash coreutils
      - name: Run installer test
        run: |
          make ISO=/tmp/elemental-${{ env.FLAVOR }}.${{ env.ARCH}}.iso ELMNTL_ACCEL=hvf ELMNTL_TARGETARCH=${{ env.ARCH }} ELMNTL_FIRMWARE=$(find /usr/local/Cellar/qemu -name edk2-${{ env.ARCH }}-code.fd -print -quit) test-installer
      - name: Upload serial console for installer tests
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: serial-${{ env.ARCH }}-${{ env.FLAVOR }}-installer.log
          path: tests/serial.log
          if-no-files-found: error
      - name: Upload qemu stdout for installer tests
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: vmstdout-${{ env.ARCH }}-${{ env.FLAVOR }}-installer.log
          path: tests/vmstdout
          if-no-files-found: error
      - name: Stop test VM
        if: always()
        run: |
          make test-clean
