name: Build & test

on:
  workflow_call:
    inputs:
      arch:
        required: true
        type: string
      flavor:
        required: true
        type: string

concurrency:
  group: ci-${{ inputs.flavor }}-${{ inputs.arch }}-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true

jobs:
  # detect step checks what machines the later steps should run on
  detect:
    runs-on: ubuntu-latest
    outputs:
      build-runs-on: ${{ steps.detect.outputs.build }}
      tests-runs-on: ${{ steps.detect.outputs.tests }}
    steps:
      - id: detect
        run: |
          case "${{inputs.arch}}" in
          x86_64)
            echo "build='ubuntu-latest'" >> $GITHUB_OUTPUT
            echo "tests='macos-latest'" >> $GITHUB_OUTPUT ;;
          aarch64)
            echo "build=['self-hosted', 'arm64']" >> $GITHUB_OUTPUT
            echo "tests='macos-latest'" >> $GITHUB_OUTPUT ;;
          esac

  build-iso:
    needs: detect
    runs-on: ${{ fromJson(needs.detect.outputs.build-runs-on) }}
    env:
      FLAVOR: ${{ inputs.flavor }}
      ARCH: ${{ inputs.arch }}
    steps:
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: Checks cached ISO
        uses: actions/cache/restore@v3
        id: cache-check
        env:
          cache-name: pr-iso-build-${{ inputs.arch }}
          enableCrossOsArchive: true
          lookup-only: true
        with:
          path: /tmp/*.iso
          key: ${{ env.cache-name }}-${{ hashFiles('Dockerfile', '**/go.sum', '**/toolkit/**', '**/examples/**') }}
      - if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        name: Cached ISO
        id: cache-iso
        uses: actions/cache/restore@v3
        env:
          cache-name: pr-iso-build-${{ inputs.arch }}
          enableCrossOsArchive: true
          lookup-only: true
        with:
          path: ${{ github.workspace }}/build/*.iso
          key: ${{ env.cache-name }}-${{ hashFiles('Dockerfile', '**/go.sum', '**/toolkit/**', '**/examples/**') }}
      - if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        name: Build toolkit
        run: |
          make build
      - if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        name: Build ISO
        run: |
          make build-iso
          sudo mv build/elemental-${{ env.FLAVOR }}.${{ env.ARCH}}.iso /tmp/
  
  build-disk:
    needs: detect
    runs-on: ${{ fromJson(needs.detect.outputs.build-runs-on) }}
    env:
      FLAVOR: ${{ inputs.flavor }}
      ARCH: ${{ inputs.arch }}
    steps:
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: Checks cached Disk
        uses: actions/cache/restore@v3
        id: cache-check
        env:
          cache-name: pr-disk-build-${{ inputs.arch }}
        with:
          path: /tmp/*.qcow2
          key: ${{ env.cache-name }}-${{ hashFiles('Dockerfile', '**/go.sum', '**/toolkit/**', '**/examples/**') }}
          enableCrossOsArchive: true
          lookup-only: true
      - if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        name: Cached Disk
        id: cache-disk
        uses: actions/cache/restore@v3
        env:
          cache-name: pr-disk-build-${{ inputs.arch }}
          enableCrossOsArchive: true
        with:
          path: /tmp/*.qcow2
          key: ${{ env.cache-name }}-${{ hashFiles('Dockerfile', '**/go.sum', '**/toolkit/**', '**/examples/**') }}
      - if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        name: Cleanup worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
          sudo df -h
      - if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        name: Install to disk
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends qemu-utils coreutils
          make build-os
          sudo -E make build-disk
          sudo mv build/elemental-${{ env.FLAVOR }}.${{ env.ARCH}}.qcow2 /tmp/

  tests-matrix:
    needs: 
      - build-disk
      - detect
    runs-on: ${{ fromJson(needs.detect.outputs.tests-runs-on) }}
    env:
      FLAVOR: ${{ inputs.flavor }}
      ARCH: ${{ inputs.arch }}
    strategy:
      matrix:
        test: [ test-smoke, test-upgrade, test-recovery, test-fallback, test-fsck, test-grubfallback ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Install deps
        run: |
          make test-deps
      - run: |
          git fetch --prune --unshallow
      - name: Cached Disk
        id: cache-disk
        uses: actions/cache/restore@v3
        env:
          cache-name: pr-disk-build-${{ inputs.arch }}
        with:
          path: /tmp/*.qcow2
          key: ${{ env.cache-name }}-${{ hashFiles('Dockerfile', '**/go.sum', '**/toolkit/**', '**/examples/**') }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - name: Run VM script dependencies
        run: |
          brew install bash coreutils
      - if: ${{ env.ARCH == 'x86_64' }} 
        name: Prepare test (x86_64)
        run: |
          make QCOW2=/tmp/elemental-${{ env.FLAVOR }}.${{ env.ARCH}}.qcow2 ELMNTL_ACCEL=hvf ELMNTL_TARGETARCH=${{ env.ARCH }} ELMNTL_FIRMWARE=$(find /usr/local/Cellar/qemu -name edk2-${{ env.ARCH }}-code.fd -print -quit) prepare-test
      - if: ${{ env.ARCH == 'aarch64' }} 
        name: Prepare test (aarch64)
        run: |
          make QCOW2=/tmp/elemental-${{ env.FLAVOR }}.${{ env.ARCH}}.qcow2 ELMNTL_ACCEL=none ELMNTL_MACHINETYPE=virt ELMNTL_TARGETARCH=${{ env.ARCH }} ELMNTL_FIRMWARE=$(find /usr/local/Cellar/qemu -name edk2-${{ env.ARCH }}-code.fd -print -quit) prepare-test
      - name: Run ${{ matrix.test }}
        run: |
          make QCOW2=/tmp/elemental-${{ env.FLAVOR }}.${{ env.ARCH}}.qcow2 ${{ matrix.test }}
      # TODO include other logs SUT collects on failure
      - name: Upload serial console for ${{ matrix.test }}
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: serial-${{ matrix.test }}.log
          path: tests/serial.log
          if-no-files-found: error
      - name: Stop test VM
        if: always()
        run: |
          make test-clean
