name: master-teal-x86_64
on: 
 push:
   branches:
     - master
concurrency:
  group: ci-master-teal-x86_64-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true
jobs:
  build-teal-x86_64:
    runs-on: [self-hosted, x64]
    if: contains(fromJson('["mudler", "fgiudici", "mjura", "davidcassany", "itxaka", "kkaempf", "cOS-cibot"]'), github.actor)
    env:
      LUET_ARCH: x86_64
      FLAVOR: teal
      ARCH: x86_64
      FINAL_REPO: quay.io/costoolkit/releases-teal
      DOWNLOAD_METADATA: false
      PUSH_CACHE: true
      REPO_CACHE: quay.io/costoolkit/build-teal-cache
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install Go
        run: |
          curl -L https://golang.org/dl/go1.17.5.linux-amd64.tar.gz -o go1.17.5.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.17.5.linux-amd64.tar.gz
      - name: Install make
        run: |
            sudo apt-get update
            sudo apt-get install -y make
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Run make validate
        run: |
          sudo -E make validate
      - name: Build packages ðŸ”§
        run: |
          export PATH=$PATH:/usr/local/go/bin
          mkdir build || true
          pushd ./.github
          go build -o build build.go
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
      - name: Generate manifests
        run: |
          for f in build/*tar*; do
            [ -e "$f" ] || continue
            sudo -E luet mtree -- generate $f -o "$f.mtree"
          done
      - name: Append manifests to metadata
        run: |
          for f in build/*mtree; do
            [ -e "$f" ] || continue
            BASE_NAME=`basename -s .package.tar.zst.mtree $f`
            sudo -E .github/append_manifests.py build/$BASE_NAME.metadata.yaml $f mtree
          done
      - name: Fix git permissions for CVE-2022-24765
        # This fixes running git commands on our git directory under sudo user
        # See https://github.blog/2022-04-12-git-security-vulnerability-announced/ for more info
        run: |
          sudo git config --global --add safe.directory ${{ github.workspace }}
          git config --global --add safe.directory ${{ github.workspace }}
      - name: Run make create-repo
        run: |
          sudo -E make create-repo
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: build-teal-x86_64
          path: build
          if-no-files-found: error
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
  iso-nonsquashfs-teal:
    runs-on: ubuntu-latest
    needs: build-teal-x86_64
    env:
      FINAL_REPO: quay.io/costoolkit/releases-teal
      FLAVOR: teal
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-teal-x86_64
          path: build
      - name: Add build repository
        run: |
          export DOCKER_INSTALL=true
          sudo -E make add_local_repo
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools mtools
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E MAKEISO_ARGS="--name cOS-Seed-teal-${{ env.COS_VERSION }}-x86_64" make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E MAKEISO_ARGS="--name cOS-Seed-teal-${{ env.COS_VERSION }}-x86_64" make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
  tests-squashfs-teal-installer-efi:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 800
      PASSTHROUGH_ARGS: "-- --squashfs"
    runs-on: macos-10.15
    needs: iso-nonsquashfs-teal
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_efi
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-efi
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-efi.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-efi.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-efi.record.zip
          path: capture.webm
          if-no-files-found: warn
  tests-squashfs-teal-installer-bios:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 800
      PASSTHROUGH_ARGS: "-- --squashfs"
    runs-on: macos-10.15
    needs: iso-nonsquashfs-teal
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_bios
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-bios
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-bios.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-bios.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-bios.record.zip
          path: capture.webm
          if-no-files-found: warn
  qemu-squashfs-teal:
    runs-on: ubuntu-latest
    needs: iso-nonsquashfs-teal
    env:
      FLAVOR: teal
      ARCH: x86_64
      PKR_VAR_arch: x86_64
      PKR_VAR_flavor: teal
      PKR_VAR_feature: vagrant
      PKR_VAR_accelerator: tcg
      PKR_VAR_cpus: 2
      PKR_VAR_memory: 4096
      PACKER_TARGET: qemu.cos-squashfs
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi
      - name: Install Packer
        uses: hashicorp-contrib/setup-packer@v1
        with:
            packer-version: 1.7.3
      - name: Build QEMU Image ðŸ”§
        run: |
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-teal-QEMU-x86_64.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-teal-QEMU-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
  vbox-squashfs-teal:
    runs-on: macos-10.15
    needs: iso-nonsquashfs-teal
    env:
      PKR_VAR_arch: x86_64
      PKR_VAR_flavor: teal
      PKR_VAR_feature: vagrant
      PACKER_TARGET: virtualbox-iso.cos-squashfs
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Install deps
        run: |
            brew install yq
      - name: Build VBox Image ðŸ”§
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-teal-vbox-x86_64.ova
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-teal-vbox-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-Packer-squashfs-teal-vbox-x86_64.capture.zip
          path: capture.webm
          if-no-files-found: error
  tests-squashfs-teal:
    env:
      ARCH: x86_64
      VAGRANT_CPU: 3
      VAGRANT_MEMORY: 10240
    runs-on: macos-10.15
    needs: vbox-squashfs-teal
    strategy:
      matrix:
        test: ["test-features", "test-hooks", "test-smoke", "test-fallback", "test-recovery", "test-upgrades-images-signed", "test-upgrades-images-unsigned", "test-upgrades-local", "test-deploys-images-recovery" ]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-squashfs-teal-vbox-x86_64.box
          path: packer
      - name: Prepare tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-clean
          make prepare-test
      - name: Run tests ðŸ”§
        run: |
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.capture.zip
          path: capture.webm
          if-no-files-found: warn
  tests-nonsquashfs-teal-installer-efi:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 800
    runs-on: macos-10.15
    needs: iso-nonsquashfs-teal
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_efi
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-efi
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-efi.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-efi.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-efi.record.zip
          path: capture.webm
          if-no-files-found: warn
  tests-nonsquashfs-teal-installer-bios:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 800
    runs-on: macos-10.15
    needs: iso-nonsquashfs-teal
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_bios
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-bios
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-bios.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-bios.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-bios.record.zip
          path: capture.webm
          if-no-files-found: warn
  qemu-nonsquashfs-teal:
    runs-on: ubuntu-latest
    needs: iso-nonsquashfs-teal
    env:
      FLAVOR: teal
      ARCH: x86_64
      PKR_VAR_arch: x86_64
      PKR_VAR_flavor: teal
      PKR_VAR_feature: vagrant
      PKR_VAR_accelerator: tcg
      PKR_VAR_cpus: 2
      PKR_VAR_memory: 4096
      PACKER_TARGET: qemu.cos
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi
      - name: Install Packer
        uses: hashicorp-contrib/setup-packer@v1
        with:
            packer-version: 1.7.3
      - name: Build QEMU Image ðŸ”§
        run: |
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-teal-QEMU-x86_64.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-teal-QEMU-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
  vbox-nonsquashfs-teal:
    runs-on: macos-10.15
    needs: iso-nonsquashfs-teal
    env:
      PKR_VAR_arch: x86_64
      PKR_VAR_flavor: teal
      PKR_VAR_feature: vagrant
      PACKER_TARGET: virtualbox-iso.cos
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Install deps
        run: |
            brew install yq
      - name: Build VBox Image ðŸ”§
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-teal-vbox-x86_64.ova
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-teal-vbox-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-Packer-nonsquashfs-teal-vbox-x86_64.capture.zip
          path: capture.webm
          if-no-files-found: error
  tests-nonsquashfs-teal:
    env:
      ARCH: x86_64
      VAGRANT_CPU: 3
      VAGRANT_MEMORY: 10240
    runs-on: macos-10.15
    needs: vbox-nonsquashfs-teal
    strategy:
      matrix:
        test: ["test-features", "test-hooks", "test-smoke", "test-fallback", "test-recovery", "test-upgrades-images-signed", "test-upgrades-images-unsigned", "test-upgrades-local", "test-deploys-images-recovery" ]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-teal-vbox-x86_64.box
          path: packer
      - name: Prepare tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-clean
          make prepare-test
      - name: Run tests ðŸ”§
        run: |
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.capture.zip
          path: capture.webm
          if-no-files-found: warn
  image-link-teal:
    runs-on: ubuntu-latest
    needs: publish-teal
    steps:
      - uses: actions/checkout@v2
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Generate link for teal
        run: |
            source .github/helpers.sh
            PACKAGE_VERSION=$(cos_package_version)
            export COS_VERSION="${PACKAGE_VERSION/+/-}"
            echo "quay.io/costoolkit/releases-teal:cos-system-${COS_VERSION}" > images-teal-x86_64.txt
      - uses: actions/upload-artifact@v2
        with:
          name: images-teal-x86_64.txt
          path: |
            images-teal-x86_64.txt
  publish-teal:
    runs-on: ubuntu-latest
    needs: tests-squashfs-teal
    permissions:
      id-token: write  # undocumented OIDC support.
    env:
      FLAVOR: teal
      ARCH: x86_64
      FINAL_REPO: quay.io/costoolkit/releases-teal
      DOWNLOAD_METADATA: true
      DOWNLOAD_ONLY: true
      DOWNLOAD_FATAL_MISSING_PACKAGES: true
      COSIGN_EXPERIMENTAL: 1 # use keyless signing
      COSIGN_REPOSITORY: raccos/releases-teal
      PUBLISH_ARGS: "--plugin luet-cosign"
      COSIGN_FULCIO_URL: "https://v1.fulcio.sigstore.dev"
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install Go
        run: |
          curl -L https://golang.org/dl/go1.17.5.linux-amd64.tar.gz -o go1.17.5.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.17.5.linux-amd64.tar.gz
      - name: Install make
        run: |
            sudo apt-get update
            sudo apt-get install -y make
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to Quay.io
        uses: docker/login-action@v1
        with:
            registry: quay.io
            username: ${{ secrets.QUAY_USERNAME }}
            password: ${{ secrets.QUAY_PASSWORD }}
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-teal-x86_64
          path: build
      - name: Add build repository
        run: |
          export DOCKER_INSTALL=true
          sudo -E make add_local_repo
      - name: Grab metadata from remotes
        run: |
          export PATH=$PATH:/usr/local/go/bin
          pushd ./.github
          go build -o build build.go
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
      - name: Fix git permissions for CVE-2022-24765
        # This fixes running git commands on our git directory under sudo user
        # See https://github.blog/2022-04-12-git-security-vulnerability-announced/ for more info
        run: |
          sudo git config --global --add safe.directory ${{ github.workspace }}
          git config --global --add safe.directory ${{ github.workspace }}
      - name: Publish to DockerHub ðŸš€
        run: |
          sudo -E make publish-repo
      - name: upload cosign logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: luetcosign.log.zip
          path: /tmp/luet-cosign.log
          if-no-files-found: warn
  raw-images-teal:
    runs-on: [self-hosted, x64]
    needs:
    - build-teal-x86_64
    env:
      ARCH: x86_64
      LUET_ARCH: x86_64
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install OS deps
        run: |
          sudo apt-get update
          sudo apt-get install -y bc sudo curl e2fsprogs dosfstools mtools squashfs-tools gdisk make tar gzip xz-utils
      - uses: actions/checkout@v2
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-teal-x86_64
          path: build
      - name: Add build repository
        run: |
          export DOCKER_INSTALL=true
          sudo -E make add_local_repo
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Run make raw_disk
        run: |
          sudo -E make raw_disk
      - name: Run make azure_disk
        run: |
          sudo -E make azure_disk
      - name: Run make gce_disk
        run: |
          sudo -E make gce_disk
      - name: Rename images
        run: |
          mv disk.raw cOS-Vanilla-RAW-teal-${{ env.COS_VERSION }}-x86_64.raw
          mv disk.raw.vhd cOS-Vanilla-AZURE-teal-${{ env.COS_VERSION }}-x86_64.vhd
          mv disk.raw.tar.gz cOS-Vanilla-GCE-teal-${{ env.COS_VERSION }}-x86_64.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-RAW-teal-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-RAW-teal-${{ env.COS_VERSION }}-x86_64.raw
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-AZURE-teal-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-AZURE-teal-${{ env.COS_VERSION }}-x86_64.vhd
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-GCE-teal-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-GCE-teal-${{ env.COS_VERSION }}-x86_64.tar.gz
          if-no-files-found: error
      - name: cleanup leftovers
        if: always()
        run: sudo rm -rf ./*.part grub_efi.cfg root .luet.yaml oem efi || true
  tests-raw-disk-deploy-teal:
    runs-on: macos-10.15
    needs: raw-images-teal
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Install deps
        run: brew install yq cdrtools
      - name: Export cos version
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Download RAW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-RAW-teal-${{ env.COS_VERSION }}-x86_64
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          PATH=$PATH:$GOPATH/bin
          sudo -E make raw_disk_test_deploy
      - name: Change logs ownership
        if: failure()
        run: |
          USER_ID=$(id -u)
          GROUP_ID=$(id -g)
          sudo chown $USER_ID:$GROUP_ID serial_port1.log
          sudo chown $USER_ID:$GROUP_ID capture.webm || true
          sudo chmod 777 serial_port1.log
          sudo chmod 777 capture.webm || true
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-teal.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-teal.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-teal.capture.zip
          path: capture.webm
          if-no-files-found: warn
  build-toolchain-tagged:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: [self-hosted, x64]
    needs: publish-teal
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Build  ðŸ”§
        run: |
          tag="${{ env.COS_VERSION }}"
          export P_VERSION="${tag/+/-}"
          docker build -t quay.io/costoolkit/toolchain:$P_VERSION .
          docker push quay.io/costoolkit/toolchain:$P_VERSION
  build-toolchain-latest:
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: [self-hosted, x64]
    needs: publish-teal
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Build  ðŸ”§
        run: |
          tag="latest"
          export P_VERSION="${tag/+/-}"
          docker build -t quay.io/costoolkit/toolchain:$P_VERSION .
          docker push quay.io/costoolkit/toolchain:$P_VERSION
  build-framework-tagged:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: publish-teal
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Prepare
        id: prep
        run: |
          tag="${{ env.COS_VERSION }}"
          P_VERSION="${tag/+/-}"
          # Set output parameters.
          echo ::set-output name=tags::quay.io/costoolkit/framework:${P_VERSION}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./images/framework
          file: ./images/framework/Dockerfile
          platforms: "linux/arm64,linux/amd64"
          push: true
          tags: ${{ steps.prep.outputs.tags }}
  build-framework-latest:
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    needs: publish-teal
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Prepare
        id: prep
        run: |
          tag="latest"
          P_VERSION="${tag/+/-}"
          # Set output parameters.
          echo ::set-output name=tags::quay.io/costoolkit/framework:${P_VERSION}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./images/framework
          file: ./images/framework/Dockerfile
          platforms: "linux/arm64,linux/amd64"
          push: true
          tags: ${{ steps.prep.outputs.tags }}
