name: PR-teal-x86_64
on:
 pull_request:
   paths:
     - conf/**
     - packages/**
     - tests/**
     - make/**
     - .github/**
     - Makefile
     - tests/**
concurrency:
  group: ci-PR-teal-x86_64-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true
jobs:
  build-teal-x86_64:
    runs-on: ubuntu-latest
    env:
      LUET_ARCH: x86_64
      FLAVOR: teal
      ARCH: x86_64
      FINAL_REPO: quay.io/costoolkit/releases-teal
      DOWNLOAD_METADATA: false
      PUSH_CACHE: false
      REPO_CACHE: quay.io/costoolkit/build-teal-cache
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          du -hcs /var/lib/snapd/snaps/* 
          # from https://github.com/apache/flink/blob/master/tools/azure-pipelines/free_disk_space.sh
          df -h
          sudo apt-get remove -y '^dotnet-.*' || true
          sudo apt-get remove -y '^llvm-.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y '^mongodb-.*' || true
          sudo apt-get remove -y '^mysql-.*' || true
          sudo apt-get remove -y '^temurin-.*' || true
          sudo apt-get remove -y azure-cli google-cloud-sdk microsoft-edge-stable google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          # https://github.com/actions/virtual-environments/issues/2840
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
          sudo rm -rf /opt/ghc # removes haskell
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" # removes all pre-cached tools (node, go, python, ruby) to free around 6Gb
          sudo rm -rf /usr/local/graalvm/
          sudo rm -rf /usr/local/.ghcup/
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          df -h
      - name: Install Go
        uses: actions/setup-go@v3
        with:
            go-version: '1.18.8'
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Run make validate
        run: |
          sudo -E make validate
      - name: Build packages ðŸ”§
        run: |
          mkdir build || true
          pushd ./.github
          go build -o build build.go
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
      - name: Fix git permissions for CVE-2022-24765
        # This fixes running git commands on our git directory under sudo user
        # See https://github.blog/2022-04-12-git-security-vulnerability-announced/ for more info
        run: |
          sudo git config --global --add safe.directory ${{ github.workspace }}
          git config --global --add safe.directory ${{ github.workspace }}
      - name: Run make create-repo
        run: |
          sudo -E make create-repo
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: build-teal-x86_64
          path: build
          if-no-files-found: error
      - name: Release space from worker â™»
        if: always()
        run: |
          du -hcs /var/lib/snapd/snaps/* 
          # from https://github.com/apache/flink/blob/master/tools/azure-pipelines/free_disk_space.sh
          df -h
          sudo apt-get remove -y '^dotnet-.*' || true
          sudo apt-get remove -y '^llvm-.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y '^mongodb-.*' || true
          sudo apt-get remove -y '^mysql-.*' || true
          sudo apt-get remove -y '^temurin-.*' || true
          sudo apt-get remove -y azure-cli google-cloud-sdk microsoft-edge-stable google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          # https://github.com/actions/virtual-environments/issues/2840
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
          sudo rm -rf /opt/ghc # removes haskell
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" # removes all pre-cached tools (node, go, python, ruby) to free around 6Gb
          sudo rm -rf /usr/local/graalvm/
          sudo rm -rf /usr/local/.ghcup/
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          df -h
  iso-nonsquashfs-teal:
    runs-on: ubuntu-latest
    needs: build-teal-x86_64
    env:
      FINAL_REPO: quay.io/costoolkit/releases-teal
      FLAVOR: teal
      ARCH: x86_64
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          du -hcs /var/lib/snapd/snaps/* 
          # from https://github.com/apache/flink/blob/master/tools/azure-pipelines/free_disk_space.sh
          df -h
          sudo apt-get remove -y '^dotnet-.*' || true
          sudo apt-get remove -y '^llvm-.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y '^mongodb-.*' || true
          sudo apt-get remove -y '^mysql-.*' || true
          sudo apt-get remove -y '^temurin-.*' || true
          sudo apt-get remove -y azure-cli google-cloud-sdk microsoft-edge-stable google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          # https://github.com/actions/virtual-environments/issues/2840
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
          sudo rm -rf /opt/ghc # removes haskell
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" # removes all pre-cached tools (node, go, python, ruby) to free around 6Gb
          sudo rm -rf /usr/local/graalvm/
          sudo rm -rf /usr/local/.ghcup/
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          df -h
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Download result for build
        uses: actions/download-artifact@v3
        with:
          name: build-teal-x86_64
          path: build
      - name: Run make add_local_repo
        run: |
          sudo -E make add_local_repo
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools mtools
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E MAKEISO_ARGS="--squash-no-compression --name cOS-Seed-teal-${{ env.COS_VERSION }}-x86_64" make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E MAKEISO_ARGS="--squash-no-compression --name cOS-Seed-teal-${{ env.COS_VERSION }}-x86_64" make iso
      - uses: actions/upload-artifact@v3
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
  tests-squashfs-teal-installer-efi:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 800
      PASSTHROUGH_ARGS: "-- --squashfs"
    runs-on: macos-12
    needs: iso-nonsquashfs-teal
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
            go-version: '1.18.8'
      - uses: actions/checkout@v3
      - name: Download iso
        uses: actions/download-artifact@v3
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_efi
      - name: Run tests ðŸ”§
        run: |
          make test-installer-efi
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cOS-squashfs-test-installer-efi.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cOS-squashfs-test-installer-efi.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cOS-squashfs-test-installer-efi.record.zip
          path: capture.webm
          if-no-files-found: warn
  qemu-squashfs-teal:
    runs-on: ubuntu-latest
    needs: iso-nonsquashfs-teal
    env:
      FLAVOR: teal
      ARCH: x86_64
      PACKER_LOG: 1
      PKR_VAR_arch: x86_64
      PKR_VAR_flavor: teal
      PKR_VAR_feature: vagrant
      PKR_VAR_accelerator: tcg
      PKR_VAR_cpus: 2
      PKR_VAR_memory: 4096
      PKR_VAR_firmware: /usr/share/OVMF/OVMF_CODE.fd
      PACKER_TARGET: qemu.cos-squashfs
    steps:
      - uses: actions/checkout@v3
      - name: Download ISO
        uses: actions/download-artifact@v3
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Install deps
        run: |
          sudo -E make deps
      - name: Install deps (apt-get)
        run: |
          sudo apt-get update
          sudo apt-get install -y ovmf qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi
      - name: Install Packer
        uses: hashicorp-contrib/setup-packer@v2
      - name: Build QEMU Image ðŸ”§
        run: |
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cOS-Packer-squashfs-teal-QEMU-x86_64.log
          path: |
            packer/*.log
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        with:
          name: cOS-Packer-squashfs-teal-QEMU-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
  tests-squashfs-teal:
    env:
      ARCH: x86_64
      VAGRANT_CPU: 2
      VAGRANT_MEMORY: 5120
      VAGRANT_FIRMWARE: /usr/share/OVMF/OVMF_CODE.fd
      COS_HOST: "192.168.122.50:22"
      COS_TIMEOUT: 1800
      TEST_VERSION: 0.9.1
    runs-on: ubuntu-latest
    needs: qemu-squashfs-teal
    strategy:
      matrix:
        test: [ test-recovery1, test-recovery2, test-recovery3, test-recovery4 ]
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          du -hcs /var/lib/snapd/snaps/* 
          # from https://github.com/apache/flink/blob/master/tools/azure-pipelines/free_disk_space.sh
          df -h
          sudo apt-get remove -y '^dotnet-.*' || true
          sudo apt-get remove -y '^llvm-.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y '^mongodb-.*' || true
          sudo apt-get remove -y '^mysql-.*' || true
          sudo apt-get remove -y '^temurin-.*' || true
          sudo apt-get remove -y azure-cli google-cloud-sdk microsoft-edge-stable google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          # https://github.com/actions/virtual-environments/issues/2840
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
          sudo rm -rf /opt/ghc # removes haskell
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" # removes all pre-cached tools (node, go, python, ruby) to free around 6Gb
          sudo rm -rf /usr/local/graalvm/
          sudo rm -rf /usr/local/.ghcup/
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          df -h
      - name: Install Go
        uses: actions/setup-go@v3
        with:
            go-version: '1.18.8'
      - uses: actions/checkout@v3
      - name: Download vagrant box
        uses: actions/download-artifact@v3
        with:
          name: cOS-Packer-squashfs-teal-QEMU-x86_64.box
          path: packer
      - name: Install deps
        run: sudo -E make deps
      - name: Install deps (apt-get)
        run: |
          sudo apt-get update
          sudo apt-get remove -y apparmor*
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi vagrant make libvirt-daemon-system bridge-utils ovmf
      - name: Prepare libvirt
        run: |
          # Create bridge conf
          sudo mkdir -p /etc/qemu/
          echo "allow all" | sudo tee -a /etc/qemu/bridge.conf
          sudo chmod u+r /etc/qemu/bridge.conf
          sudo chmod u+s $(find /usr/ -name qemu-bridge-helper -print -quit|xargs)
          # Set a static ip for our VM
          sudo virsh net-update default add ip-dhcp-host "<host mac='52:54:00:00:00:01' name='jojo' ip='192.168.122.50' />" --live --config
      - name: Enable serial for default vagrant-libvirt machine
        run: |
          # vagrant-libvirt does not support adding serials from config yet so we need to modify the default template directly
          sudo sed -i "s|<serial type='pty'>|<serial type='file'><source path='$GITHUB_WORKSPACE/serial_log.log'/>|" $(sudo find /usr/share -name "domain.xml.erb" -print -quit|xargs)
      - name: Prepare tests ðŸ”§
        run: |
          make test-clean
          make prepare-test
      - name: Run tests ðŸ”§
        run: |
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.serial.zip
          path: serial_log.log
          if-no-files-found: warn
  tests-nonsquashfs-teal-installer-efi:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 800
    runs-on: macos-12
    needs: iso-nonsquashfs-teal
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
            go-version: '1.18.8'
      - uses: actions/checkout@v3
      - name: Download iso
        uses: actions/download-artifact@v3
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_efi
      - name: Run tests ðŸ”§
        run: |
          make test-installer-efi
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-efi.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-efi.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-efi.record.zip
          path: capture.webm
          if-no-files-found: warn
  qemu-nonsquashfs-teal:
    runs-on: ubuntu-latest
    needs: iso-nonsquashfs-teal
    env:
      FLAVOR: teal
      ARCH: x86_64
      PACKER_LOG: 1
      PKR_VAR_arch: x86_64
      PKR_VAR_flavor: teal
      PKR_VAR_feature: vagrant
      PKR_VAR_accelerator: tcg
      PKR_VAR_cpus: 2
      PKR_VAR_memory: 4096
      PKR_VAR_firmware: /usr/share/OVMF/OVMF_CODE.fd
      PACKER_TARGET: qemu.cos
    steps:
      - uses: actions/checkout@v3
      - name: Download ISO
        uses: actions/download-artifact@v3
        with:
          name: cOS-nonsquashfs-teal-x86_64.iso.zip
      - name: Install deps
        run: |
          sudo -E make deps
      - name: Install deps (apt-get)
        run: |
          sudo apt-get update
          sudo apt-get install -y ovmf qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi
      - name: Install Packer
        uses: hashicorp-contrib/setup-packer@v2
      - name: Build QEMU Image ðŸ”§
        run: |
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cOS-Packer-nonsquashfs-teal-QEMU-x86_64.log
          path: |
            packer/*.log
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        with:
          name: cOS-Packer-nonsquashfs-teal-QEMU-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
  tests-nonsquashfs-teal:
    env:
      ARCH: x86_64
      VAGRANT_CPU: 2
      VAGRANT_MEMORY: 5120
      VAGRANT_FIRMWARE: /usr/share/OVMF/OVMF_CODE.fd
      COS_HOST: "192.168.122.50:22"
      COS_TIMEOUT: 1800
      TEST_VERSION: 0.9.1
    runs-on: ubuntu-latest
    needs: qemu-nonsquashfs-teal
    strategy:
      matrix:
        test: [ test-hooks, test-smoke, test-fallback, test-recovery1, test-recovery2, test-recovery3, test-recovery4, test-upgrades-images-signed, test-upgrades-images-unsigned, test-upgrades-local, test-deploys-images-recovery ]
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          du -hcs /var/lib/snapd/snaps/* 
          # from https://github.com/apache/flink/blob/master/tools/azure-pipelines/free_disk_space.sh
          df -h
          sudo apt-get remove -y '^dotnet-.*' || true
          sudo apt-get remove -y '^llvm-.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y '^mongodb-.*' || true
          sudo apt-get remove -y '^mysql-.*' || true
          sudo apt-get remove -y '^temurin-.*' || true
          sudo apt-get remove -y azure-cli google-cloud-sdk microsoft-edge-stable google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          # https://github.com/actions/virtual-environments/issues/2840
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
          sudo rm -rf /opt/ghc # removes haskell
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" # removes all pre-cached tools (node, go, python, ruby) to free around 6Gb
          sudo rm -rf /usr/local/graalvm/
          sudo rm -rf /usr/local/.ghcup/
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          df -h
      - name: Install Go
        uses: actions/setup-go@v3
        with:
            go-version: '1.18.8'
      - uses: actions/checkout@v3
      - name: Download vagrant box
        uses: actions/download-artifact@v3
        with:
          name: cOS-Packer-nonsquashfs-teal-QEMU-x86_64.box
          path: packer
      - name: Install deps
        run: sudo -E make deps
      - name: Install deps (apt-get)
        run: |
          sudo apt-get update
          sudo apt-get remove -y apparmor*
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi vagrant make libvirt-daemon-system bridge-utils ovmf
      - name: Prepare libvirt
        run: |
          # Create bridge conf
          sudo mkdir -p /etc/qemu/
          echo "allow all" | sudo tee -a /etc/qemu/bridge.conf
          sudo chmod u+r /etc/qemu/bridge.conf
          sudo chmod u+s $(find /usr/ -name qemu-bridge-helper -print -quit|xargs)
          # Set a static ip for our VM
          sudo virsh net-update default add ip-dhcp-host "<host mac='52:54:00:00:00:01' name='jojo' ip='192.168.122.50' />" --live --config
      - name: Enable serial for default vagrant-libvirt machine
        run: |
          # vagrant-libvirt does not support adding serials from config yet so we need to modify the default template directly
          sudo sed -i "s|<serial type='pty'>|<serial type='file'><source path='$GITHUB_WORKSPACE/serial_log.log'/>|" $(sudo find /usr/share -name "domain.xml.erb" -print -quit|xargs)
      - name: Prepare tests ðŸ”§
        run: |
          make test-clean
          make prepare-test
      - name: Run tests ðŸ”§
        run: |
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.serial.zip
          path: serial_log.log
          if-no-files-found: warn
