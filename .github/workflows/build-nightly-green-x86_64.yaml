name: nightly-green-x86_64
on:
 schedule:
   - cron: 0 20 * * *
concurrency:
  group: ci-nightly-green-x86_64-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true
jobs:
  build-green-x86_64:
    runs-on: ubuntu-latest
    env:
      LUET_ARCH: x86_64
      FLAVOR: green
      ARCH: x86_64
      FINAL_REPO: quay.io/costoolkit/releases-green
      DOWNLOAD_METADATA: false
      PUSH_CACHE: false
      REPO_CACHE: quay.io/costoolkit/build-green-cache
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Run make validate
        run: |
          sudo -E make validate
      - name: Build packages ðŸ”§
        run: |
          export PATH=$PATH:/usr/local/go/bin
          mkdir build || true
          pushd ./.github
          go build -o build build.go
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
      - name: Fix git permissions for CVE-2022-24765
        # This fixes running git commands on our git directory under sudo user
        # See https://github.blog/2022-04-12-git-security-vulnerability-announced/ for more info
        run: |
          sudo git config --global --add safe.directory ${{ github.workspace }}
          git config --global --add safe.directory ${{ github.workspace }}
      - name: Run make create-repo
        run: |
          sudo -E make create-repo
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: build-green-x86_64
          path: build
          if-no-files-found: error
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
  raw-images-green:
    runs-on: ubuntu-latest
    needs:
    - build-green-x86_64
    env:
      ARCH: x86_64
      LUET_ARCH: x86_64
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
      - name: Install OS deps
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            sudo apt-get update
            sudo apt-get install -y bc sudo curl e2fsprogs dosfstools mtools squashfs-tools gdisk make tar gzip xz-utils
      - uses: actions/checkout@v2
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-green-x86_64
          path: build
      - name: Add build repository
        run: |
          export DOCKER_INSTALL=true
          sudo -E make add_local_repo
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Run make raw_disk
        run: |
          sudo -E make raw_disk
      - name: Run make azure_disk
        run: |
          sudo -E make azure_disk
      - name: Run make gce_disk
        run: |
          sudo -E make gce_disk
      - name: Rename images
        run: |
          mv disk.raw cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64.raw
          mv disk.raw.vhd cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-x86_64.vhd
          mv disk.raw.tar.gz cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-x86_64.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64.raw
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-x86_64.vhd
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-x86_64.tar.gz
          if-no-files-found: error
      - name: cleanup leftovers
        if: always()
        run: sudo rm -rf ./*.part grub_efi.cfg root .luet.yaml oem efi || true
  tests-raw-disk-deploy-green:
    runs-on: macos-12
    needs: raw-images-green
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Install deps
        run: brew install yq cdrtools
      - name: Export cos version
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Download RAW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo@latest
          go get -u github.com/onsi/gomega/...
          PATH=$PATH:$GOPATH/bin
          sudo -E make raw_disk_test_deploy
      - name: Change logs ownership
        if: failure()
        run: |
          USER_ID=$(id -u)
          GROUP_ID=$(id -g)
          sudo chown $USER_ID:$GROUP_ID serial_port1.log
          sudo chown $USER_ID:$GROUP_ID capture.webm || true
          sudo chmod 777 serial_port1.log
          sudo chmod 777 capture.webm || true
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-green.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-green.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-green.capture.zip
          path: capture.webm
          if-no-files-found: warn
