name: nightly-green-x86_64
on: 
 schedule:
   - cron: 0 20 * * *
concurrency:
  group: ci-nightly-green-x86_64-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true
jobs:
  docker-build-green:
    runs-on: ubuntu-latest
    env:
      FLAVOR: green
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
      - name: Build  ðŸ”§
        shell: 'script -q -e -c "bash {0}"'
        run: |
          source .envrc
          cos-build $FLAVOR
  build-green-x86_64:
    runs-on: ubuntu-latest
    env:
      LUET_ARCH: x86_64
      FLAVOR: green
      ARCH: x86_64
      FINAL_REPO: quay.io/costoolkit/releases-green
      DOWNLOAD_METADATA: false
      PUSH_CACHE: false
      REPO_CACHE: quay.io/costoolkit/build-green-cache
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install --no-spinner -y toolchain/yq
      - name: Run make validate
        run: |
          sudo -E make validate
      - name: Build packages ðŸ”§
        run: |
          export PATH=$PATH:/usr/local/go/bin
          mkdir build || true
          pushd ./.github
          go build -o build
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
      - name: Run make create-repo
        run: |
          sudo -E make create-repo
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: build-green-x86_64
          path: build
          if-no-files-found: error
  iso-squashfs-green:
    runs-on: ubuntu-latest
    needs: build-green-x86_64
    env:
      FINAL_REPO: quay.io/costoolkit/releases-green
      FLAVOR: green
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-green-x86_64
          path: build
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install --no-spinner -y toolchain/yq
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          source .github/helpers.sh
          create_remote_manifest manifest.yaml
          sudo -E MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-x86_64" MANIFEST=manifest.yaml.remote make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E YQ=/usr/bin/yq MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-x86_64" make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-squashfs-green-x86_64.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
  tests-squashfs-green-installer-efi:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 600
    runs-on: macos-10.15
    needs: iso-squashfs-green
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-squashfs-green-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_efi
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-efi
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-efi.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-efi.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
  tests-squashfs-green-installer-bios:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 600
    runs-on: macos-10.15
    needs: iso-squashfs-green
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-squashfs-green-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_bios
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-bios
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-bios.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-test-installer-bios.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
  qemu-squashfs-green:
    runs-on: ubuntu-latest
    needs: iso-squashfs-green
    env:
      FLAVOR: green
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-squashfs-green-x86_64.iso.zip
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi
      - name: Build QEMU Image ðŸ”§
        run: |
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          export PKR_VAR_arch=x86_64
          export PKR_VAR_flavor=green
          export PKR_VAR_feature=vagrant
          export PKR_VAR_accelerator=none
          PACKER_ARGS="-only qemu.cos" make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-green-QEMU-x86_64.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-green-QEMU-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
  vbox-squashfs-green:
    runs-on: macos-10.15
    needs: iso-squashfs-green
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-squashfs-green-x86_64.iso.zip
      # - name: Install deps
      #   run: |
      #     brew tap hashicorp/tap
      #     brew install hashicorp/tap/packer
      - name: Install deps
        run: |
            brew install yq
      - name: Build VBox Image ðŸ”§
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          COS_VERSION=$(cos_version)
          PACKER_ARGS="-var='feature=vagrant' -var='build=$COS_VERSION' -var='arch=x86_64' -var='flavor=green' -only virtualbox-iso.cos" make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-green-vbox-x86_64.ova
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-green-vbox-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
  tests-squashfs-green:
    env:
      ARCH: x86_64
      VAGRANT_CPU: 3
      VAGRANT_MEMORY: 10240
    runs-on: macos-10.15
    needs: vbox-squashfs-green
    strategy:
      matrix:
        test: ["test-features", "test-hooks", "test-smoke", "test-fallback", "test-recovery", "test-upgrades-images-signed", "test-upgrades-images-unsigned", "test-upgrades-local", "test-deploys-images"]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-squashfs-green-vbox-x86_64.box
          path: packer
      - name: Prepare tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-clean
          make prepare-test
      - name: Run tests ðŸ”§
        run: |
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.serial.zip
          path: tests/serial_port1
          if-no-files-found: warn
  iso-nonsquashfs-green:
    runs-on: ubuntu-latest
    needs: build-green-x86_64
    env:
      FINAL_REPO: quay.io/costoolkit/releases-green
      FLAVOR: green
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-green-x86_64
          path: build
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install --no-spinner -y toolchain/yq
      - name: Tweak manifest and drop squashfs recovery
        run: |
          source .github/helpers.sh
          drop_recovery manifest.yaml
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          source .github/helpers.sh
          create_remote_manifest manifest.yaml
          sudo -E MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-x86_64" MANIFEST=manifest.yaml.remote make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E YQ=/usr/bin/yq MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-x86_64" make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nonsquashfs-green-x86_64.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
  tests-nonsquashfs-green-installer-efi:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 600
    runs-on: macos-10.15
    needs: iso-nonsquashfs-green
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-green-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_efi
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-efi
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-efi.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-efi.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
  tests-nonsquashfs-green-installer-bios:
    env:
      ARCH: x86_64
      COS_TIMEOUT: 600
    runs-on: macos-10.15
    needs: iso-nonsquashfs-green
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download iso
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-green-x86_64.iso.zip
      - name: Prepare tests ðŸ”§
        run: |
          make create_vm_from_iso_bios
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-installer-bios
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-bios.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-test-installer-bios.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
  qemu-nonsquashfs-green:
    runs-on: ubuntu-latest
    needs: iso-nonsquashfs-green
    env:
      FLAVOR: green
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-green-x86_64.iso.zip
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi
      - name: Build QEMU Image ðŸ”§
        run: |
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          export PKR_VAR_arch=x86_64
          export PKR_VAR_flavor=green
          export PKR_VAR_feature=vagrant
          export PKR_VAR_accelerator=none
          PACKER_ARGS="-only qemu.cos" make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-green-QEMU-x86_64.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-green-QEMU-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
  vbox-nonsquashfs-green:
    runs-on: macos-10.15
    needs: iso-nonsquashfs-green
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-green-x86_64.iso.zip
      # - name: Install deps
      #   run: |
      #     brew tap hashicorp/tap
      #     brew install hashicorp/tap/packer
      - name: Install deps
        run: |
            brew install yq
      - name: Build VBox Image ðŸ”§
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          COS_VERSION=$(cos_version)
          PACKER_ARGS="-var='feature=vagrant' -var='build=$COS_VERSION' -var='arch=x86_64' -var='flavor=green' -only virtualbox-iso.cos" make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-green-vbox-x86_64.ova
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-green-vbox-x86_64.box
          path: |
            packer/*.box
          if-no-files-found: error
  tests-nonsquashfs-green:
    env:
      ARCH: x86_64
      VAGRANT_CPU: 3
      VAGRANT_MEMORY: 10240
    runs-on: macos-10.15
    needs: vbox-nonsquashfs-green
    strategy:
      matrix:
        test: ["test-features", "test-hooks", "test-smoke", "test-fallback", "test-recovery", "test-upgrades-images-signed", "test-upgrades-images-unsigned", "test-upgrades-local", "test-deploys-images"]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-green-vbox-x86_64.box
          path: packer
      - name: Prepare tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          PATH=$PATH:$GOPATH/bin
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-clean
          make prepare-test
      - name: Run tests ðŸ”§
        run: |
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.serial.zip
          path: tests/serial_port1
          if-no-files-found: warn
  raw-images-green:
    runs-on: ubuntu-latest
    needs:
    - build-green-x86_64
    steps:
      - name: Install OS deps
        run: |
          sudo apt-get update
          sudo apt-get install -y bc qemu-utils sudo curl e2fsprogs dosfstools mtools squashfs-tools gdisk make tar gzip xz-utils
      - uses: actions/checkout@v2
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-green-x86_64
          path: build
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install --no-spinner -y toolchain/yq
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Run make raw_disk
        run: |
          sudo -E make raw_disk
      - name: Run make azure_disk
        run: |
          sudo -E make azure_disk
      - name: Run make gce_disk
        run: |
          sudo -E make gce_disk
      - name: Rename images
        run: |
          mv disk.raw cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64.raw
          mv disk.vhd cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-x86_64.vhd
          mv disk.raw.tar.gz cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-x86_64.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64.raw
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-x86_64.vhd
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-x86_64
          path: |
            cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-x86_64.tar.gz
          if-no-files-found: error
  tests-raw-disk-deploy-green:
    runs-on: macos-10.15
    needs: raw-images-green
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '^1.16'
      - uses: actions/checkout@v2
      - name: Install deps
        run: brew install yq cdrtools
      - name: Export cos version
        run: |
          export YQ=/usr/local/bin/yq
          source .github/helpers.sh
          echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Download RAW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64
      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          PATH=$PATH:$GOPATH/bin
          sudo -E make raw_disk_test_deploy
      - name: Change serial log ownership
        if: failure()
        run: |
          USER_ID=$(id -u)
          GROUP_ID=$(id -g)
          sudo chown $USER_ID:$GROUP_ID serial_port1.log
          sudo chmod 777 serial_port1.log
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-green.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-raw_disk_test_deploy-green.serial.zip
          path: serial_port1.log
          if-no-files-found: warn
