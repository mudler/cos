name: PR-teal-arm64
on: 
 pull_request:
   types:
     - labeled
     - synchronize
concurrency:
  group: ci-PR-teal-arm64-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true
jobs:
  build-teal-arm64:
    runs-on: [self-hosted, arm64]
    if: contains(fromJson('["mudler", "fgiudici", "mjura", "davidcassany", "itxaka", "kkaempf", "cOS-cibot"]'), github.actor) && contains(github.event.pull_request.labels.*.name, 'arm64')
    env:
      LUET_ARCH: arm64
      FLAVOR: teal
      ARCH: arm64
      FINAL_REPO: quay.io/costoolkit/releases-teal-arm64
      DOWNLOAD_METADATA: false
      PUSH_CACHE: false
      REPO_CACHE: quay.io/costoolkit/build-teal-cache-arm64
      # For non x86_64 archs, skip the *-fips build as there are no golang releases in other arches
      SKIP_PACKAGES: "build/golang-fips toolchain-fips/yip toolchain-fips/luet-makeiso toolchain-fips/luet live/syslinux live/systemd-boot live/boot"
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install Go
        run: |
          curl -L https://golang.org/dl/go1.17.5.linux-arm64.tar.gz -o go1.17.5.linux-arm64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.17.5.linux-arm64.tar.gz
      - name: Install make
        run: |
            sudo apt-get update
            sudo apt-get install -y make
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Run make validate
        run: |
          sudo -E make validate
      - name: Build packages ðŸ”§
        run: |
          export PATH=$PATH:/usr/local/go/bin
          mkdir build || true
          pushd ./.github
          go build -o build build.go
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
      - name: Fix git permissions for CVE-2022-24765
        # This fixes running git commands on our git directory under sudo user
        # See https://github.blog/2022-04-12-git-security-vulnerability-announced/ for more info
        run: |
          sudo git config --global --add safe.directory ${{ github.workspace }}
          git config --global --add safe.directory ${{ github.workspace }}
      - name: Run make create-repo
        run: |
          sudo -E make create-repo
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: build-teal-arm64
          path: build
          if-no-files-found: error
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
  iso-nonsquashfs-teal:
    runs-on: ubuntu-latest
    needs: build-teal-arm64
    env:
      FINAL_REPO: quay.io/costoolkit/releases-teal-arm64
      FLAVOR: teal
      ARCH: arm64
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install CI plugins
        run: |
            sudo cp -rfv .github/plugins/* /usr/bin/
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-teal-arm64
          path: build
      - name: Add build repository
        run: |
          export DOCKER_INSTALL=true
          sudo -E make add_local_repo
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools mtools
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E MAKEISO_ARGS="--name cOS-Seed-teal-${{ env.COS_VERSION }}-arm64" make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E MAKEISO_ARGS="--name cOS-Seed-teal-${{ env.COS_VERSION }}-arm64" make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-arm64.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
  qemu-squashfs-teal:
    runs-on: ubuntu-latest
    needs: iso-nonsquashfs-teal
    env:
      FLAVOR: teal
      ARCH: arm64
      PKR_VAR_arch: arm64
      PKR_VAR_flavor: teal
      PKR_VAR_feature: vagrant
      PKR_VAR_accelerator: tcg
      PKR_VAR_cpus: 2
      PKR_VAR_memory: 4096
      PKR_VAR_qemu_binary: qemu-system-aarch64
      PKR_VAR_firmware: /usr/share/qemu-efi-aarch64/QEMU_EFI.fd
      PACKER_TARGET: qemu.cos-arm64
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-arm64.iso.zip
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi
      - name: Install Packer
        uses: hashicorp-contrib/setup-packer@v1
        with:
            packer-version: 1.7.3
      - name: Build QEMU Image ðŸ”§
        run: |
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-teal-QEMU-arm64.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-squashfs-teal-QEMU-arm64.box
          path: |
            packer/*.box
          if-no-files-found: error
  tests-squashfs-teal:
    env:
      ARCH: arm64
      VAGRANT_CPU: 2
      VAGRANT_MEMORY: 5120
      VAGRANT_FIRMWARE: /usr/share/AAVMF/AAVMF_CODE.fd
      COS_HOST: "192.168.122.50:22"
      COS_TIMEOUT: 1800
    runs-on: ubuntu-latest
    needs: qemu-squashfs-teal
    strategy:
      matrix:
        test: [test-smoke, test-upgrades-images-unsigned]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-squashfs-teal-QEMU-arm64.box
          path: packer
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get remove -y apparmor*
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 vagrant make libvirt-daemon-system bridge-utils ovmf
      - name: Prepare libvirt
        run: |
          # Create bridge conf
          sudo mkdir -p /etc/qemu/
          echo "allow all" | sudo tee -a /etc/qemu/bridge.conf
          sudo chmod u+r /etc/qemu/bridge.conf
          sudo chmod u+s $(find /usr/ -name qemu-bridge-helper -print -quit|xargs)
          # Set a static ip for our VM
          sudo virsh net-update default add ip-dhcp-host "<host mac='52:54:00:00:00:01' name='jojo' ip='192.168.122.50' />" --live --config
      - name: Enable serial for default vagrant-libvirt machine
        run: |
          # vagrant-libvirt does not support adding serials from config yet so we need to modify the default template directly
          sudo sed -i "s|<serial type='pty'>|<serial type='file'><source path='$GITHUB_WORKSPACE/serial_log.log'/>|" $(sudo find /usr/share -name "domain.xml.erb" -print -quit|xargs)
      - name: Prepare tests ðŸ”§
        run: |
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-clean
          make prepare-test
      - name: Run tests ðŸ”§
        run: |
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.serial.zip
          path: serial_log.log
          if-no-files-found: warn
  qemu-nonsquashfs-teal:
    runs-on: ubuntu-latest
    needs: iso-nonsquashfs-teal
    env:
      FLAVOR: teal
      ARCH: arm64
      PKR_VAR_arch: arm64
      PKR_VAR_flavor: teal
      PKR_VAR_feature: vagrant
      PKR_VAR_accelerator: tcg
      PKR_VAR_cpus: 2
      PKR_VAR_memory: 4096
      PKR_VAR_qemu_binary: qemu-system-aarch64
      PKR_VAR_firmware: /usr/share/qemu-efi-aarch64/QEMU_EFI.fd
      PACKER_TARGET: qemu.cos-arm64
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-teal-arm64.iso.zip
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi
      - name: Install Packer
        uses: hashicorp-contrib/setup-packer@v1
        with:
            packer-version: 1.7.3
      - name: Build QEMU Image ðŸ”§
        run: |
          source .github/helpers.sh
          export PKR_VAR_build=$(cos_version)
          make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-teal-QEMU-arm64.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-teal-QEMU-arm64.box
          path: |
            packer/*.box
          if-no-files-found: error
  tests-nonsquashfs-teal:
    env:
      ARCH: arm64
      VAGRANT_CPU: 2
      VAGRANT_MEMORY: 5120
      VAGRANT_FIRMWARE: /usr/share/AAVMF/AAVMF_CODE.fd
      COS_HOST: "192.168.122.50:22"
      COS_TIMEOUT: 1800
    runs-on: ubuntu-latest
    needs: qemu-nonsquashfs-teal
    strategy:
      matrix:
        test: [test-smoke, test-upgrades-images-unsigned]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-Packer-nonsquashfs-teal-QEMU-arm64.box
          path: packer
      - name: Install deps
        run: |
          sudo -E make deps
          sudo apt-get update
          sudo apt-get remove -y apparmor*
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 vagrant make libvirt-daemon-system bridge-utils ovmf
      - name: Prepare libvirt
        run: |
          # Create bridge conf
          sudo mkdir -p /etc/qemu/
          echo "allow all" | sudo tee -a /etc/qemu/bridge.conf
          sudo chmod u+r /etc/qemu/bridge.conf
          sudo chmod u+s $(find /usr/ -name qemu-bridge-helper -print -quit|xargs)
          # Set a static ip for our VM
          sudo virsh net-update default add ip-dhcp-host "<host mac='52:54:00:00:00:01' name='jojo' ip='192.168.122.50' />" --live --config
      - name: Enable serial for default vagrant-libvirt machine
        run: |
          # vagrant-libvirt does not support adding serials from config yet so we need to modify the default template directly
          sudo sed -i "s|<serial type='pty'>|<serial type='file'><source path='$GITHUB_WORKSPACE/serial_log.log'/>|" $(sudo find /usr/share -name "domain.xml.erb" -print -quit|xargs)
      - name: Prepare tests ðŸ”§
        run: |
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          make test-clean
          make prepare-test
      - name: Run tests ðŸ”§
        run: |
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.serial.zip
          path: serial_log.log
          if-no-files-found: warn
  raw-images-teal:
    runs-on: [self-hosted, arm64]
    needs:
    - build-teal-arm64
    env:
      ARCH: arm64
      LUET_ARCH: arm64
    steps:
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
          sudo rm -Rf root oem efi || true
          docker system prune -f -a --volumes || true
      - name: Install OS deps
        run: |
          sudo apt-get update
          sudo apt-get install -y bc sudo curl e2fsprogs dosfstools mtools squashfs-tools gdisk make tar gzip xz-utils
      - uses: actions/checkout@v2
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-teal-arm64
          path: build
      - name: Add build repository
        run: |
          export DOCKER_INSTALL=true
          sudo -E make add_local_repo
      - name: Run make deps_ci
        run: |
          export DOCKER_INSTALL=true
          sudo -E make deps_ci
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Run make raw_disk
        run: |
          sudo -E make raw_disk
      - name: Run make azure_disk
        run: |
          sudo -E make azure_disk
      - name: Run make gce_disk
        run: |
          sudo -E make gce_disk
      - name: Rename images
        run: |
          mv disk.raw cOS-Vanilla-RAW-teal-${{ env.COS_VERSION }}-arm64.raw
          mv disk.raw.vhd cOS-Vanilla-AZURE-teal-${{ env.COS_VERSION }}-arm64.vhd
          mv disk.raw.tar.gz cOS-Vanilla-GCE-teal-${{ env.COS_VERSION }}-arm64.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-RAW-teal-${{ env.COS_VERSION }}-arm64
          path: |
            cOS-Vanilla-RAW-teal-${{ env.COS_VERSION }}-arm64.raw
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-AZURE-teal-${{ env.COS_VERSION }}-arm64
          path: |
            cOS-Vanilla-AZURE-teal-${{ env.COS_VERSION }}-arm64.vhd
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-GCE-teal-${{ env.COS_VERSION }}-arm64
          path: |
            cOS-Vanilla-GCE-teal-${{ env.COS_VERSION }}-arm64.tar.gz
          if-no-files-found: error
      - name: cleanup leftovers
        if: always()
        run: sudo rm -rf ./*.part grub_efi.cfg root .luet.yaml oem efi || true
